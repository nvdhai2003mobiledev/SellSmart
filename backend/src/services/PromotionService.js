const Promotion = require('../models/Promotion');

// üü¢ Th√™m khuy·∫øn m√£i m·ªõi
const addPromotion = async (newPromotion) => {
    try {
        const { name, discount, type, minOrderValue, maxDiscount, status, startDate, endDate } = newPromotion;

        // Ki·ªÉm tra n·∫øu ng√†y k·∫øt th√∫c nh·ªè h∆°n ng√†y b·∫Øt ƒë·∫ßu
        if (new Date(endDate) < new Date(startDate)) {
            return Promise.reject({
                status: 'Error',
                message: 'Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu',
            });
        }

        // T·∫°o khuy·∫øn m√£i m·ªõi
        const createdPromotion = await Promotion.create({
            name,
            discount,
            type,
            minOrderValue,
            maxDiscount,
            status,
            startDate,
            endDate
        });

        return {
            status: 'Ok',
            message: 'Th√™m khuy·∫øn m√£i th√†nh c√¥ng',
            data: createdPromotion,
        };
    } catch (error) {
        console.error('L·ªói CSDL:', error);
        return Promise.reject({
            status: 'Error',
            message: 'L·ªói khi th√™m khuy·∫øn m√£i',
            error: error.message,
        });
    }
};

// üü° C·∫≠p nh·∫≠t khuy·∫øn m√£i
const updatePromotion = async (promotionId, updatedData) => {
    try {
        if (Object.keys(updatedData).length === 0) {
            return Promise.reject({
                status: 'Error',
                message: 'Kh√¥ng c√≥ d·ªØ li·ªáu c·∫≠p nh·∫≠t',
            });
        }

        // N·∫øu c√≥ ng√†y b·∫Øt ƒë·∫ßu & k·∫øt th√∫c, ki·ªÉm tra h·ª£p l·ªá
        if (updatedData.startDate && updatedData.endDate && new Date(updatedData.endDate) < new Date(updatedData.startDate)) {
            return Promise.reject({
                status: 'Error',
                message: 'Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu',
            });
        }

        const updatedPromotion = await Promotion.findByIdAndUpdate(promotionId, updatedData, { new: true });

        if (!updatedPromotion) {
            return Promise.reject({
                status: 'Error',
                message: 'Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i',
            });
        }

        return {
            status: 'Ok',
            message: 'C·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng',
            data: updatedPromotion,
        };
    } catch (error) {
        console.error('L·ªói CSDL:', error);
        return Promise.reject({
            status: 'Error',
            message: 'L·ªói khi c·∫≠p nh·∫≠t khuy·∫øn m√£i',
            error: error.message,
        });
    }
};

// üî¥ X√≥a khuy·∫øn m√£i
const deletePromotion = async (promotionId) => {
    try {
        const deletedPromotion = await Promotion.findByIdAndDelete(promotionId);
        
        if (!deletedPromotion) {
            return Promise.reject({
                status: 'Error',
                message: 'Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i ƒë·ªÉ x√≥a',
            });
        }

        return {
            status: 'Ok',
            message: 'X√≥a khuy·∫øn m√£i th√†nh c√¥ng',
        };
    } catch (error) {
        console.error('L·ªói CSDL:', error);
        return Promise.reject({
            status: 'Error',
            message: 'L·ªói khi x√≥a khuy·∫øn m√£i',
            error: error.message,
        });
    }
};

  
  

module.exports = {
    addPromotion,
    updatePromotion,
    deletePromotion,
};
