const SupplierService = require("../services/SupplierService")
const Supplier = require('../models/Supplier');

// üìå L·∫•y danh s√°ch nh√† cung c·∫•p
exports.getAllSuppliers = async (req, res) => {
    try {
        const suppliers = await SupplierService.getAllSuppliers();
        res.render("supplier", { suppliers });
    } catch (error) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch nh√† cung c·∫•p:", error);
        res.status(500).json({ message: error.message });
    }
};

exports.createSupplier = async (req, res) => {
    try {
        const supplier = await SupplierService.createSupplier(req.body);
        
        console.log("‚úÖ Th√™m nh√† cung c·∫•p th√†nh c√¥ng:", supplier); // Log khi th√™m th√†nh c√¥ng

        res.status(201).json(supplier);
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m nh√† cung c·∫•p:", error);
        res.status(400).json({ message: error.message });
    }
};
// SupplierController.js - Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t m·ªõi
exports.updateSupplier = async (req, res) => {
    try {
        const supplierId = req.params.id;
        const updateData = req.body;

        console.log(`üîÑ Y√™u c·∫ßu c·∫≠p nh·∫≠t nh√† cung c·∫•p ID: ${supplierId}`);
        console.log("üìù D·ªØ li·ªáu c·∫≠p nh·∫≠t nh·∫≠n ƒë∆∞·ª£c:", updateData);

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!updateData || Object.keys(updateData).length === 0) {
            console.log("‚ö†Ô∏è D·ªØ li·ªáu c·∫≠p nh·∫≠t tr·ªëng");
            return res.status(400).json({ 
                success: false, 
                message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!" 
            });
        }

        // C·∫≠p nh·∫≠t d·ªØ li·ªáu
        const updatedSupplier = await Supplier.findByIdAndUpdate(
            supplierId,
            updateData,
            { new: true, runValidators: true }
        );

        if (!updatedSupplier) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p ho·∫∑c c·∫≠p nh·∫≠t th·∫•t b·∫°i");
            return res.status(404).json({ 
                success: false, 
                message: "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p ho·∫∑c kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!" 
            });
        }

        console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", updatedSupplier);
        return res.status(200).json({ 
            success: true, 
            message: "C·∫≠p nh·∫≠t nh√† cung c·∫•p th√†nh c√¥ng!",
            data: updatedSupplier 
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t nh√† cung c·∫•p:", error);
        return res.status(500).json({ 
            success: false, 
            message: "L·ªói server khi c·∫≠p nh·∫≠t nh√† cung c·∫•p", 
            error: error.message 
        });
    }
};

// üìå X√≥a nh√† cung c·∫•p
exports.deleteSupplier = async (req, res) => {
    try {
        const deletedSupplier = await SupplierService.deleteSupplier(req.params.id);
        if (!deletedSupplier) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p" });
        }
        res.json({ message: "X√≥a th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå L·∫•y nh√† cung c·∫•p theo ID
exports.getSupplierById = async (req, res) => {
    try {
        const supplier = await SupplierService.getSupplierById(req.params.id);
        if (!supplier) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p" });
        res.json(supplier);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
