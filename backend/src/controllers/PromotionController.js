
const mongoose = require('mongoose');
const Promotion = require("../models/Promotion");

// üü¢ L·∫•y danh s√°ch khuy·∫øn m√£i
// Trong controller (getPromotions)
const getPromotions = async (req, res) => {
  try {
    const promotions = await Promotion.find().lean();

    // N·∫øu c·∫ßn emptyPromo ƒë·ªÉ t·∫°o form th√™m khuy·∫øn m√£i
    const emptyPromo = {
      _id: "",
      name: "",
      discount: 0,
      type: "percentage",
      minOrderValue: 0,
      maxDiscount: 0,
      status: "inactive",
      startDate: null,
      endDate: null,
    };

    res.render("promotions", { promotions, promo: emptyPromo });
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch khuy·∫øn m√£i:", error);
    res.status(500).send("L·ªói khi t·∫£i danh s√°ch khuy·∫øn m√£i!");
  }
};

  

// üü¢ L·∫•y danh s√°ch khuy·∫øn m√£i d∆∞·ªõi d·∫°ng JSON
const getPromotionAsJson = async (req, res) => {
  try {
    const promotions = await Promotion.find();
    res.json(promotions);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch khuy·∫øn m√£i:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch khuy·∫øn m√£i!" });
  }
};

// üü¢ L·∫•y khuy·∫øn m√£i theo ID
const getPromotionById = async (req, res) => {
  try {
    const { promotionId } = req.params; // ƒê·ªïi `id` th√†nh `promotionId` cho ƒë·ªìng nh·∫•t
    const promo = await Promotion.findById(promotionId).lean(); 
    const promotions = await Promotion.find().lean(); // L·∫•y danh s√°ch khuy·∫øn m√£i

    if (!promo) {
      return res.status(404).send("Khuy·∫øn m√£i kh√¥ng t·ªìn t·∫°i!");
    }

    res.render("promotions", { promotions, promo }); // Truy·ªÅn ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
  } catch (error) {
    console.error("üî• L·ªói l·∫•y khuy·∫øn m√£i:", error);
    res.status(500).send("L·ªói server khi l·∫•y d·ªØ li·ªáu khuy·∫øn m√£i!");
  }
};


// üü¢ Th√™m khuy·∫øn m√£i
const addPromotion = async (req, res) => {
  try {
    const { name, discount, type, minOrderValue, maxDiscount, startDate, endDate } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!name || !discount || !type || !minOrderValue || !maxDiscount || !startDate || !endDate) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin khuy·∫øn m√£i!" });
    }

    const newPromotion = new Promotion({
      name: name.trim(),
      discount,
      type,
      minOrderValue,
      maxDiscount,
      status: "active",
      startDate,
      endDate,
    });

    await newPromotion.save();
    res.status(201).json({ message: "Th√™m khuy·∫øn m√£i th√†nh c√¥ng!", promotion: newPromotion });
  } catch (error) {
    console.error("L·ªói th√™m khuy·∫øn m√£i:", error);
    res.status(500).json({ message: "L·ªói khi th√™m khuy·∫øn m√£i!" });
  }
};


// üü¢ C·∫≠p nh·∫≠t khuy·∫øn m√£i
const updatePromotion = async (req, res) => {
  try {
    const { promotionId } = req.params;

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu g·ª≠i l√™n
    if (Object.keys(req.body).length === 0) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t!" });
    }

    const updatedPromotion = await Promotion.findByIdAndUpdate(
      promotionId,
      { ...req.body }, // Ch·ªâ c·∫≠p nh·∫≠t d·ªØ li·ªáu c√≥ trong req.body
      { new: true, runValidators: true } // runValidators ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu m·ªõi
    );

    if (!updatedPromotion) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i!" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", promotion: updatedPromotion });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t khuy·∫øn m√£i:", error);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t khuy·∫øn m√£i!" });
  }
};


// üü¢ X√≥a khuy·∫øn m√£i


const deletePromotion = async (req, res) => {
  try {
      const { promotionId } = req.params;
      console.log("üîç ƒêang x√≥a khuy·∫øn m√£i v·ªõi ID:", promotionId);

      if (!promotionId.match(/^[0-9a-fA-F]{24}$/)) {
          console.log("‚ùå ID kh√¥ng h·ª£p l·ªá:", promotionId);
          return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
      }

      const deletedPromotion = await Promotion.findByIdAndDelete(promotionId);

      if (!deletedPromotion) {
          console.log("‚ùå Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i v·ªõi ID:", promotionId);
          return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i" });
      }

      console.log("‚úÖ X√≥a th√†nh c√¥ng khuy·∫øn m√£i:", deletedPromotion);
      res.status(200).json({ message: "X√≥a th√†nh c√¥ng" });
  } catch (error) {
      console.error("üî• L·ªói khi x√≥a khuy·∫øn m√£i:", error); // In ra l·ªói chi ti·∫øt
      res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};



// üü¢ Export c√°c h√†m
module.exports = {
  getPromotions,
  getPromotionAsJson,
  getPromotionById,
  addPromotion,
  updatePromotion,
  deletePromotion
};
