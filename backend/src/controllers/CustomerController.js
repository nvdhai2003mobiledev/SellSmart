const mongoose = require("mongoose");
const Customer = require("../models/Customer");

// üü¢ Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng (render EJS)
const getCustomers = async (req, res) => {
  try {
    const customers = await Customer.find();
    res.render("dashboard/customers", { customers, page: "customers" });
    // res.json(customers);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch kh√°ch h√†ng:", error);
    res.status(500).send("L·ªói server!");
  }
};

// üü¢ L·∫•y danh s√°ch kh√°ch h√†ng d∆∞·ªõi d·∫°ng JSON
const getCustomerAsJson = async (req, res) => {
  try {
    const customers = await Customer.find().select(
      "-password -confirmPassword",
    );
    res.json(customers);
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch kh√°ch h√†ng:", error);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng!" });
  }
};

// üü¢ L·∫•y kh√°ch h√†ng theo ID
const getCustomerById = async (req, res) => {
  try {
    const { customerId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(customerId)) {
      return res.status(400).json({ message: "ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá!" });
    }

    const customer = await Customer.findById(customerId);
    if (!customer) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!" });
    }

    res.json(customer);
  } catch (error) {
    console.error("L·ªói l·∫•y kh√°ch h√†ng:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
};

// üü¢ API th√™m kh√°ch h√†ng
const addCustomer = async (req, res) => {
  try {
    const { fullName, phoneNumber, email, birthDate, address, avatar } =
      req.body;

    // Ki·ªÉm tra n·∫øu thi·∫øu th√¥ng tin
    if (!fullName || !phoneNumber || !email || !birthDate || !address) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
    const existingCustomer = await Customer.findOne({ email: email });
    if (existingCustomer) {
      return res
        .status(400)
        .json({ message: "Email ƒë√£ t·ªìn t·∫°i! Vui l√≤ng nh·∫≠p email kh√°c." });
    }

    // T·∫°o kh√°ch h√†ng m·ªõi
    const newCustomer = new Customer({
      fullName,
      phoneNumber,
      email,
      birthDate: new Date(birthDate),
      address,
      avatar,
    });

    await newCustomer.save();

    // Tr·∫£ v·ªÅ danh s√°ch kh√°ch h√†ng m·ªõi
    const customers = await Customer.find();
    res.render("customers", { customers });
  } catch (error) {
    console.error("L·ªói khi th√™m kh√°ch h√†ng:", error); // Log l·ªói chi ti·∫øt
    res
      .status(500)
      .json({ message: "L·ªói khi th√™m kh√°ch h√†ng!", error: error.message });
  }
};

// üü¢ API c·∫≠p nh·∫≠t kh√°ch h√†ng
const updateCustomer = async (req, res) => {
  try {
    const { customerId } = req.params;
    const { fullName, phoneNumber, email, address, birthDate, avatar } =
      req.body;

    if (!mongoose.Types.ObjectId.isValid(customerId)) {
      return res.status(400).json({ message: "ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá!" });
    }

    const customer = await Customer.findById(customerId);
    if (!customer) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!" });
    }

    const updatedCustomer = await Customer.findByIdAndUpdate(
      customerId,
      { fullName, phoneNumber, email, address, birthDate, avatar },
      { new: true, runValidators: true },
    );

    console.log("Kh√°ch h√†ng sau c·∫≠p nh·∫≠t:", updatedCustomer);
    return res.json({
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
      customer: updatedCustomer,
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t kh√°ch h√†ng:", error);
    return res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng!" });
  }
};

// üü¢ API x√≥a kh√°ch h√†ng
const deleteCustomer = async (req, res) => {
  try {
    const { customerId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(customerId)) {
      return res.status(400).json({ message: "ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá!" });
    }

    const deletedCustomer = await Customer.findByIdAndDelete(customerId);
    if (!deletedCustomer) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!" });
    }

    console.log("ƒê√£ x√≥a kh√°ch h√†ng:", deletedCustomer);
    res.json({ message: "X√≥a th√†nh c√¥ng!" });

    const customers = await Customer.find();
    res.render("customers", { customers });
  } catch (error) {
    console.error("L·ªói x√≥a kh√°ch h√†ng:", error);
    res.status(500).json({ message: "L·ªói khi x√≥a kh√°ch h√†ng!" });
  }
};

// ‚úÖ Xu·∫•t t·∫•t c·∫£ h√†m
module.exports = {
  getCustomers,
  getCustomerAsJson,
  getCustomerById,
  addCustomer,
  updateCustomer,
  deleteCustomer,
};
