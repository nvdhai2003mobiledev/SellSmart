<%- include('../layouts/main.ejs') %>

<div class="main-content order-page">
  <div class="page-header">
  <div class="w-100 text-center">
    <h1>Danh sách hóa đơn</h1>
  </div>
  </div>

  <!-- Mục tìm kiếm hóa đơn -->
  <div class="order-search-container">
    <h3><i class="fas fa-search"></i> Tìm kiếm hóa đơn</h3>
    <div class="order-search-grid">
      <div>
        <label for="searchOrderID">Mã hóa đơn:</label>
        <input type="text" id="searchOrderID" class="order-search-input" placeholder="Nhập mã hóa đơn" value="<%= filters?.orderID || '' %>">
      </div>
      <div>
        <label for="searchCustomerName">Tên khách hàng:</label>
        <input type="text" id="searchCustomerName" class="order-search-input" placeholder="Nhập tên khách hàng" value="<%= filters?.customerName || '' %>">
      </div>
      <div>
        <label for="searchPhone">Số điện thoại:</label>
        <input type="text" id="searchPhone" class="order-search-input" placeholder="Nhập số điện thoại" value="<%= filters?.phone || '' %>">
      </div>
      <div>
        <label for="searchStatus">Trạng thái:</label>
        <select id="searchStatus" class="order-search-input">
          <option value="">Tất cả</option>
          <option value="pending" <%= filters?.status === 'pending' ? 'selected' : '' %>>Chưa xử lý</option>
          <option value="processing" <%= filters?.status === 'processing' ? 'selected' : '' %>>Đã xử lý</option>
          <option value="canceled" <%= filters?.status === 'canceled' ? 'selected' : '' %>>Đã hủy</option>
        </select>
      </div>
      <div>
        <label for="searchPaymentStatus">Trạng thái thanh toán:</label>
        <select id="searchPaymentStatus" class="order-search-input">
          <option value="">Tất cả</option>
          <option value="paid" <%= filters?.paymentStatus === 'paid' ? 'selected' : '' %>>Đã thanh toán</option>
          <option value="unpaid" <%= filters?.paymentStatus === 'unpaid' ? 'selected' : '' %>>Chưa thanh toán</option>
          <option value="partpaid" <%= filters?.paymentStatus === 'partpaid' ? 'selected' : '' %>>Thanh toán một phần</option>
        </select>
      </div>
      <div>
        <label for="searchFromDate">Từ ngày:</label>
        <input type="date" id="searchFromDate" class="order-search-input" value="<%= filters?.fromDate || '' %>">
      </div>
      <div>
        <label for="searchToDate">Đến ngày:</label>
        <input type="date" id="searchToDate" class="order-search-input" value="<%= filters?.toDate || '' %>">
      </div>
    </div>
    <div class="order-search-actions">
      <button type="button" onclick="searchServerSide()" class="btn btn-primary">
        <i class="fas fa-search"></i> Tìm kiếm
      </button>
      <button type="button" onclick="resetSearch()" class="btn btn-secondary">
        <i class="fas fa-undo"></i> Đặt lại
      </button>
    </div>
  </div>
  
  <div class="order-table-container">
  <table class="order-table">
    <thead>
      <tr>
        <th>Mã hóa đơn</th>
        <th>Khách hàng</th>
        <th>SĐT</th>
        <th>Tổng tiền</th>
        <th>Trạng thái</th>
          <th>Thanh toán</th>
        <th>Ngày tạo</th>
        <th>Thao tác</th>
      </tr>
    </thead>
    <tbody>
        <% if (orders && orders.length > 0) { %>
          <% orders.forEach(order => { %>
      <tr>
        <td>
                <a href="/orders/<%= order._id %>/detail" class="order-id-link" title="<%= order.orderID %>">
                  <% 
                    // Lấy 4 ký tự cuối của orderID
                    const orderIDText = order.orderID;
                    const prefix = orderIDText.split('-')[0];
                    const fullCode = orderIDText.split('-')[1];
                    const shortCode = fullCode.slice(-4);
                  %>
                  <%= prefix %>-<%= shortCode %>
                </a>
        </td>
              <td><%= order.customerID ? order.customerID.fullName : "Unknown Customer" %></td>
              <td><%= order.customerID ? order.customerID.phoneNumber : "N/A" %></td>
              <td class="text-right"><%= order.totalAmount.toLocaleString("vi-VN") %> VND</td>
              <td>
            <% const statusMap = {
              'pending': 'Chưa xử lý',
              'processing': 'Đã xử lý',
              'canceled': 'Đã hủy',
              'draft': 'Đơn nháp',
            }; %>
                <span class="order-status status-<%= order.status %>">
            <%= statusMap[order.status] || order.status %>
          </span>
        </td>
              <td>
                <% const paymentStatusMap = {
                  'paid': 'Đã thanh toán',
                  'unpaid': 'Chưa thanh toán',
                  'partpaid': 'Thanh toán một phần'
                }; %>
                <span class="payment-status payment-<%= order.paymentStatus %>">
                  <%= paymentStatusMap[order.paymentStatus] || order.paymentStatus %>
                </span>
              </td>
        <td><%= new Date(order.createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }) %></td>
        <td>
          <div class="order-action-buttons">
                  <button class="btn btn-sm btn-info show-details-btn" data-id="<%= order._id %>">
              <i class="fas fa-eye"></i> Chi tiết
            </button>
                 
          </div>
        </td>
      </tr>
      <% }) %>
        <% } else { %>
          <tr>
            <td colspan="8" class="text-center">Không tìm thấy hóa đơn nào</td>
          </tr>
        <% } %>
    </tbody>
  </table>
  </div>

  <!-- Thêm phân trang -->
  <% if (pagination && pagination.totalPages > 0) { %>
  <div class="pagination-container">
    <div class="pagination-info">
      Hiển thị <%= orders.length %> trên tổng số <%= pagination.total %> hóa đơn
    </div>
    <div class="pagination-controls">
      <span>Trang:</span>
      <ul class="pagination">
        <% if (pagination.page > 1) { %>
          <li class="page-item">
            <a class="page-link" href="/orders?page=1<%= filters.orderID ? '&orderID=' + filters.orderID : '' %><%= filters.customerName ? '&customerName=' + filters.customerName : '' %><%= filters.phone ? '&phone=' + filters.phone : '' %><%= filters.status ? '&status=' + filters.status : '' %><%= filters.paymentStatus ? '&paymentStatus=' + filters.paymentStatus : '' %><%= filters.fromDate ? '&fromDate=' + filters.fromDate : '' %><%= filters.toDate ? '&toDate=' + filters.toDate : '' %><%= pagination.pageSize ? '&pageSize=' + pagination.pageSize : '' %>">Đầu</a>
          </li>
          <li class="page-item">
            <a class="page-link" href="/orders?page=<%= pagination.page - 1 %><%= filters.orderID ? '&orderID=' + filters.orderID : '' %><%= filters.customerName ? '&customerName=' + filters.customerName : '' %><%= filters.phone ? '&phone=' + filters.phone : '' %><%= filters.status ? '&status=' + filters.status : '' %><%= filters.paymentStatus ? '&paymentStatus=' + filters.paymentStatus : '' %><%= filters.fromDate ? '&fromDate=' + filters.fromDate : '' %><%= filters.toDate ? '&toDate=' + filters.toDate : '' %><%= pagination.pageSize ? '&pageSize=' + pagination.pageSize : '' %>">
              <i class="fas fa-chevron-left"></i>
            </a>
          </li>
        <% } %>

        <% 
          let startPage = Math.max(pagination.page - 2, 1);
          let endPage = Math.min(startPage + 4, pagination.totalPages);
          
          if (endPage - startPage < 4 && pagination.totalPages > 4) {
            startPage = Math.max(endPage - 4, 1);
          }
        %>

        <% for (let i = startPage; i <= endPage; i++) { %>
          <li class="page-item <%= i === pagination.page ? 'active' : '' %>">
            <a class="page-link" href="/orders?page=<%= i %><%= filters.orderID ? '&orderID=' + filters.orderID : '' %><%= filters.customerName ? '&customerName=' + filters.customerName : '' %><%= filters.phone ? '&phone=' + filters.phone : '' %><%= filters.status ? '&status=' + filters.status : '' %><%= filters.paymentStatus ? '&paymentStatus=' + filters.paymentStatus : '' %><%= filters.fromDate ? '&fromDate=' + filters.fromDate : '' %><%= filters.toDate ? '&toDate=' + filters.toDate : '' %><%= pagination.pageSize ? '&pageSize=' + pagination.pageSize : '' %>"><%= i %></a>
          </li>
        <% } %>

        <% if (pagination.page < pagination.totalPages) { %>
          <li class="page-item">
            <a class="page-link" href="/orders?page=<%= pagination.page + 1 %><%= filters.orderID ? '&orderID=' + filters.orderID : '' %><%= filters.customerName ? '&customerName=' + filters.customerName : '' %><%= filters.phone ? '&phone=' + filters.phone : '' %><%= filters.status ? '&status=' + filters.status : '' %><%= filters.paymentStatus ? '&paymentStatus=' + filters.paymentStatus : '' %><%= filters.fromDate ? '&fromDate=' + filters.fromDate : '' %><%= filters.toDate ? '&toDate=' + filters.toDate : '' %><%= pagination.pageSize ? '&pageSize=' + pagination.pageSize : '' %>">
              <i class="fas fa-chevron-right"></i>
            </a>
          </li>
          <li class="page-item">
            <a class="page-link" href="/orders?page=<%= pagination.totalPages %><%= filters.orderID ? '&orderID=' + filters.orderID : '' %><%= filters.customerName ? '&customerName=' + filters.customerName : '' %><%= filters.phone ? '&phone=' + filters.phone : '' %><%= filters.status ? '&status=' + filters.status : '' %><%= filters.paymentStatus ? '&paymentStatus=' + filters.paymentStatus : '' %><%= filters.fromDate ? '&fromDate=' + filters.fromDate : '' %><%= filters.toDate ? '&toDate=' + filters.toDate : '' %><%= pagination.pageSize ? '&pageSize=' + pagination.pageSize : '' %>">Cuối</a>
          </li>
        <% } %>
      </ul>
    </div>
    <div class="pagination-size">
      <label for="pageSize">Số đơn/trang:</label>
      <select id="pageSize" onchange="changePageSize()">
        <option value="10" <%= pagination.pageSize === 10 ? 'selected' : '' %>>10</option>
        <option value="20" <%= pagination.pageSize === 20 ? 'selected' : '' %>>20</option>
        <option value="50" <%= pagination.pageSize === 50 ? 'selected' : '' %>>50</option>
        <option value="100" <%= pagination.pageSize === 100 ? 'selected' : '' %>>100</option>
      </select>
    </div>
  </div>
  <% } %>
    </div>

<!-- Thêm modal chi tiết hóa đơn -->
<div id="orderDetailModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Chi tiết hóa đơn <span id="modalOrderId"></span></h2>
      <span class="close">&times;</span>
    </div>
    <div class="modal-body">
      <div class="detail-loading">
        <i class="fas fa-spinner fa-spin"></i> Đang tải thông tin...
      </div>
      <div class="order-detail-container">
        <div class="order-detail-section">
          <h3>Thông tin chung</h3>
          <table class="detail-table">
            <tr>
              <td class="detail-label">Mã hóa đơn:</td>
              <td id="detail-orderID"></td>
          </tr>
          <tr>
              <td class="detail-label">Ngày tạo:</td>
              <td id="detail-createdAt"></td>
          </tr>
          <tr>
              <td class="detail-label">Trạng thái:</td>
              <td id="detail-status"></td>
          </tr>
          <tr>
              <td class="detail-label">Thanh toán:</td>
              <td id="detail-paymentStatus"></td>
            </tr>
            <tr>
              <td class="detail-label">Phương thức:</td>
              <td id="detail-paymentMethod"></td>
            </tr>
            <tr>
              <td class="detail-label">Đã thanh toán:</td>
              <td id="detail-paidAmount"></td>
            </tr>
            <tr id="detail-remaining-row" style="display: none;">
              <td class="detail-label">Còn lại:</td>
              <td id="detail-remainingAmount" class="remaining-amount"></td>
            </tr>
            <tr>
              <td class="detail-label">Người thực hiện:</td>
              <td id="detail-employee"></td>
            </tr>
            <tr>
              <td class="detail-label">Ghi chú:</td>
              <td id="detail-notes"></td>
          </tr>
        </table>
      </div>
      
        <div class="order-detail-section">
        <h3>Thông tin khách hàng</h3>
          <table class="detail-table">
          <tr>
              <td class="detail-label">Họ tên:</td>
              <td id="detail-customerName"></td>
          </tr>
          <tr>
              <td class="detail-label">Số điện thoại:</td>
              <td id="detail-customerPhone"></td>
          </tr>
          <tr>
              <td class="detail-label">Email:</td>
              <td id="detail-customerEmail"></td>
          </tr>
          <tr>
              <td class="detail-label">Địa chỉ:</td>
              <td id="detail-customerAddress"></td>
          </tr>
        </table>
      </div>

        <div class="order-detail-section">
          <h3>Sản phẩm</h3>
          <table class="product-table">
            <thead>
              <tr>
                <th>Tên sản phẩm</th>
                <th>Thuộc tính</th>
                <th>Số lượng</th>
                <th>Đơn giá</th>
                <th>Thành tiền</th>
              </tr>
            </thead>
            <tbody id="detail-products"></tbody>
          </table>
    </div>

        <div class="order-detail-section">
          <h3>Tổng tiền</h3>
          <table class="detail-table">
            <tr>
              <td class="detail-label">Tổng tiền hàng:</td>
              <td id="detail-originalAmount"></td>
            </tr>
            <tr id="discount-row">
              <td class="detail-label">Giảm giá:</td>
              <td id="detail-discount"></td>
            </tr>
            <tr>
              <td class="detail-label">Tổng thanh toán:</td>
              <td id="detail-totalAmount" class="total-amount"></td>
            </tr>
          </table>
        </div>

        <div class="order-detail-section payment-history" style="display: none;">
          <h3>Lịch sử thanh toán</h3>
          <table class="payment-history-table">
      <thead>
        <tr>
                <th>Phương thức</th>
                <th>Số tiền</th>
                <th>Thời gian</th>
        </tr>
      </thead>
            <tbody id="payment-history-tbody">
              <!-- Payment history will be populated here -->
      </tbody>
    </table>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button id="modalPrintBtn" class="btn btn-success">
        <i class="fas fa-print"></i> In hóa đơn
      </button>
      <button id="modalCloseBtn" class="btn btn-secondary">
        <i class="fas fa-times"></i> Đóng
      </button>
    </div>
  </div>
</div>

<style>
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .order-page h1 {
    margin-bottom: 10px;
    color: #2c3e50;
  }
  
  .order-search-container {
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
  }
  
  .order-search-container h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 18px;
    color: #2c3e50;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
  }
  
  .order-search-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 15px;
  }
  
  .order-search-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }
  
  .order-search-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
  }
  
  .order-table-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  
  .order-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .order-table th {
    background-color: #f8f9fa;
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
    color: #495057;
    border-bottom: 2px solid #dee2e6;
  }
  
  .order-table td {
    padding: 12px 15px;
    border-bottom: 1px solid #dee2e6;
    vertical-align: middle;
  }
  
  .order-table tr:last-child td {
    border-bottom: none;
  }
  
  .order-table tr:hover {
    background-color: #f8f9fa;
  }
  
  .order-id-link {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .order-id-link:hover {
    text-decoration: underline;
  }
  
  .text-right {
    text-align: right;
  }
  
  .text-center {
    text-align: center;
  }
  
  .order-status {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 13px;
    font-weight: 500;
  }
  
  .status-pending {
    background-color: #ffeeba;
    color: #856404;
  }
  
  .status-processing {
    background-color: #b8daff;
    color: #004085;
  }
  
  .status-canceled {
    background-color: #f5c6cb;
    color: #721c24;
  }
  
  .payment-status {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 13px;
    font-weight: 500;
  }
  
  .payment-paid {
    background-color: #c3e6cb;
    color: #155724;
  }
  
  .payment-unpaid {
    background-color: #f5c6cb;
    color: #721c24;
  }
  
  .payment-partpaid {
    background-color: #ffeeba;
    color: #856404;
  }
  
  .order-action-buttons {
    display: flex;
    gap: 5px;
  }
  
  .btn {
    display: inline-block;
    font-weight: 400;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    user-select: none;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    cursor: pointer;
  }
  
  .btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-secondary {
    color: #fff;
    background-color: #6c757d;
    border-color: #6c757d;
  }
  
  .btn-info {
    color: #fff;
    background-color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
  }
  
  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: 0.2rem;
  }

  /* Modal styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 2% auto;
    padding: 0;
    border: 1px solid #888;
    width: 80%;
    max-width: 950px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    animation: modalFadeIn 0.3s;
  }

  @keyframes modalFadeIn {
    from {opacity: 0; transform: translateY(-20px);}
    to {opacity: 1; transform: translateY(0);}
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
  }

  .modal-header h2 {
    margin: 0;
    font-size: 20px;
    color: #2c3e50;
  }

  .close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
  }

  .close:hover,
  .close:focus {
    color: #000;
    text-decoration: none;
  }

  .modal-body {
    padding: 20px;
    max-height: 70vh;
    overflow-y: auto;
  }

  .modal-footer {
    padding: 15px 20px;
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
    text-align: right;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  .detail-loading {
    text-align: center;
    padding: 30px;
    font-size: 18px;
    color: #6c757d;
  }

  .order-detail-container {
    display: none;
  }

  .order-detail-section {
    margin-bottom: 20px;
    background-color: #fff;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: 15px;
  }

  .order-detail-section h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 18px;
    color: #2c3e50;
    padding-bottom: 8px;
    border-bottom: 1px solid #eee;
  }

  .detail-table {
    width: 100%;
    border-collapse: collapse;
  }

  .detail-table td {
    padding: 8px 12px;
    line-height: 1.5;
  }

  .detail-label {
    font-weight: 600;
    width: 150px;
    color: #495057;
  }

  .product-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 10px;
  }

  .product-table th, 
  .product-table td {
    border: 1px solid #dee2e6;
    padding: 10px;
    text-align: left;
  }

  .product-table th {
    background-color: #f8f9fa;
    font-weight: 600;
  }

  .total-amount {
    font-weight: bold;
    font-size: 18px;
    color: #2c3e50;
  }

  .status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 13px;
    font-weight: 500;
  }

  .remaining-amount {
    font-weight: bold;
    color: #dc3545;
  }

  .payment-history-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
  }

  .payment-history-table th,
  .payment-history-table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }

  .payment-history-table th {
    font-weight: 600;
    background-color: #f8f9fa;
    color: #495057;
  }

  .payment-history-table tr:last-child td {
    border-bottom: none;
  }

  .payment-method-badge {
    display: inline-block;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 12px;
    background-color: #e9ecef;
  }

  .method-cash {
    background-color: #c3e6cb;
    color: #155724;
  }

  .method-credit {
    background-color: #b8daff;
    color: #004085;
  }

  .method-ewallet {
    background-color: #ffeeba;
    color: #856404;
  }

  /* Pagination styles */
  .pagination-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
    background-color: #fff;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .pagination-info {
    color: #6c757d;
    font-size: 14px;
  }
  
  .pagination-controls {
    display: flex;
    align-items: center;
  }
  
  .pagination-controls span {
    margin-right: 10px;
    color: #495057;
  }
  
  .pagination {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .page-item {
    margin: 0 2px;
  }
  
  .page-link {
    display: inline-block;
    padding: 6px 12px;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    color: #007bff;
    background-color: #fff;
    text-decoration: none;
    font-size: 14px;
    transition: all 0.2s;
  }
  
  .page-link:hover {
    background-color: #e9ecef;
  }
  
  .page-item.active .page-link {
    background-color: #007bff;
    color: #fff;
    border-color: #007bff;
  }
  
  .pagination-size {
    display: flex;
    align-items: center;
  }
  
  .pagination-size label {
    margin-right: 10px;
    color: #495057;
    font-size: 14px;
  }
  
  .pagination-size select {
    padding: 5px 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    background-color: #fff;
  }
</style>

<script>
  // We don't need the goToPage function anymore since we're using direct links
  
  // Update the page size change function
  function changePageSize() {
    const pageSize = document.getElementById('pageSize').value;
    
    // Build the URL with current search parameters and new page size
    const currentUrl = new URL(window.location.href);
    const params = new URLSearchParams(currentUrl.search);
    
    params.set('pageSize', pageSize);
    params.set('page', 1); // Reset to first page
    
    window.location.href = window.location.pathname + '?' + params.toString();
  }
  
  // Search server-side
  function searchServerSide() {
    const orderID = document.getElementById('searchOrderID').value.trim();
    const customerName = document.getElementById('searchCustomerName').value.trim();
    const phone = document.getElementById('searchPhone').value.trim();
    const status = document.getElementById('searchStatus').value;
    const paymentStatus = document.getElementById('searchPaymentStatus').value;
    const fromDate = document.getElementById('searchFromDate').value;
    const toDate = document.getElementById('searchToDate').value;
    
    const urlParams = new URLSearchParams();
    
    if (orderID) urlParams.set('orderID', orderID);
    if (customerName) urlParams.set('customerName', customerName);
    if (phone) urlParams.set('phone', phone);
    if (status) urlParams.set('status', status);
    if (paymentStatus) urlParams.set('paymentStatus', paymentStatus);
    if (fromDate) urlParams.set('fromDate', fromDate);
    if (toDate) urlParams.set('toDate', toDate);
    
    // Keep the current page size
    const pageSizeElement = document.getElementById('pageSize');
    const currentPageSize = pageSizeElement ? pageSizeElement.value : '10';
    urlParams.set('pageSize', currentPageSize);
    
    // Reset to first page
    urlParams.set('page', 1);
    
    window.location.href = window.location.pathname + '?' + urlParams.toString();
  }
  
  // Reset search
  function resetSearch() {
    window.location.href = window.location.pathname;
  }
  
  // Lưu trữ tất cả hóa đơn (only the current page)
  let allOrders = [];

  // Khởi tạo trang
  window.onload = function() {
    console.log("Page loaded");

    allOrders = Array.from(document.querySelectorAll('.order-table tbody tr')).map(row => {
      if (row.cells.length < 7) return null; // Skip empty message row
      
      const orderIdLink = row.cells[0].querySelector('a');
      const orderId = orderIdLink ? orderIdLink.href.split('/').pop() : '';
      const fullOrderId = orderIdLink ? orderIdLink.title : ''; // Lấy mã hóa đơn đầy đủ từ title
      
      const statusElement = row.cells[4].querySelector('.order-status');
      const statusClass = statusElement ? statusElement.classList[1].replace('status-', '') : '';
      
      const paymentStatusElement = row.cells[5].querySelector('.payment-status');
      const paymentStatusClass = paymentStatusElement ? paymentStatusElement.classList[1].replace('payment-', '') : '';

      const order = {
        _id: orderId,
        orderID: fullOrderId, // Lưu mã hóa đơn đầy đủ để tìm kiếm
        displayOrderID: row.cells[0].textContent.trim(), // Hiển thị mã rút gọn
        customerID: {
          fullName: row.cells[1].textContent.trim(),
          phoneNumber: row.cells[2].textContent.trim()
        },
        totalAmount: parseFloat(row.cells[3].textContent.trim().replace(/\s*VND/, '').replace(/\./g, '')) || 0,
        status: statusClass,
        paymentStatus: paymentStatusClass,
        createdAt: row.cells[6].textContent.trim(),
        _originalRow: row
      };

      return order;
    }).filter(order => order !== null);

    console.log("Tổng số hóa đơn trên trang hiện tại:", allOrders.length);
  };

  // Remove the client-side search functions that are being replaced by server-side search
  function searchOrders() {
    // This function is now replaced by searchServerSide()
    searchServerSide();
  }

  function displayOrders(orders) {
    // This function is no longer needed as the server handles rendering
    console.log("Display orders is now handled by the server");
  }

  // Modal handling
  const modal = document.getElementById("orderDetailModal");
  const closeBtn = document.querySelector(".close");
  const modalCloseBtn = document.getElementById("modalCloseBtn");
  const modalOrderId = document.getElementById("modalOrderId");
  const detailLoading = document.querySelector(".detail-loading");
  const detailContainer = document.querySelector(".order-detail-container");
  const printBtn = document.getElementById("modalPrintBtn");

  // Add event listeners to all detail buttons
  document.querySelectorAll(".show-details-btn").forEach(button => {
    button.addEventListener("click", function() {
      const orderId = this.getAttribute("data-id");
      showOrderDetails(orderId);
    });
  });

  // Close modal when clicking the X button
  closeBtn.onclick = function() {
    modal.style.display = "none";
  }

  // Close modal when clicking the Close button
  modalCloseBtn.onclick = function() {
    modal.style.display = "none";
  }

  // Close modal when clicking outside of it
  window.onclick = function(event) {
    if (event.target == modal) {
      modal.style.display = "none";
    }
  }

  // Print functionality
  printBtn.onclick = function() {
    window.print();
  }

  // Function to fetch and display order details
  function showOrderDetails(orderId) {
    // Show modal and loading indicator
    modal.style.display = "block";
    detailLoading.style.display = "block";
    detailContainer.style.display = "none";
    
    // Fetch order details
    fetch(`/orders/${orderId}/detail-json`)
    .then(response => {
      if (!response.ok) {
          throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
        if (data.status === 'Ok' && data.data) {
          const order = data.data;
          
          // Set basic order info
          modalOrderId.textContent = formatShortOrderId(order.orderID);
          document.getElementById("detail-orderID").textContent = order.orderID;
          document.getElementById("detail-createdAt").textContent = new Date(order.createdAt).toLocaleString('vi-VN');
          
          // Status with styling
    const statusMap = {
      'pending': 'Chưa xử lý',
      'processing': 'Đã xử lý',
            'shipping': 'Đang giao',
            'delivered': 'Đã giao',
      'canceled': 'Đã hủy'
    };
          const statusDisplay = document.getElementById("detail-status");
          statusDisplay.innerHTML = `<span class="status-badge status-${order.status}">${statusMap[order.status] || order.status}</span>`;
          
          // Payment status with styling
          const paymentStatusMap = {
            'paid': 'Đã thanh toán',
            'unpaid': 'Chưa thanh toán',
            'partpaid': 'Thanh toán một phần',
            'refunded': 'Đã hoàn tiền'
          };
          const paymentStatusDisplay = document.getElementById("detail-paymentStatus");
          paymentStatusDisplay.innerHTML = `<span class="status-badge payment-${order.paymentStatus}">${paymentStatusMap[order.paymentStatus] || order.paymentStatus}</span>`;
          
          // Employee information
          const employeeDisplay = document.getElementById("detail-employee");
          if (order.employeeID) {
            if (typeof order.employeeID === 'object') {
              // Nếu là object, hiển thị thông tin đầy đủ
              const employeeName = order.employeeID.fullName || "N/A";
              const position = order.employeeID.position ? ` (${order.employeeID.position})` : '';
              employeeDisplay.textContent = employeeName + position;
            } else if (typeof order.employeeID === 'string') {
              // Nếu là string, có thể là ID
              employeeDisplay.textContent = "ID: " + order.employeeID;
            } else {
              employeeDisplay.textContent = "Không rõ";
            }
          } else {
            employeeDisplay.textContent = "Không rõ";
          }
          
          // Payment method and amount
          const paymentMethodMap = {
            'cash': 'Tiền mặt',
            'credit card': 'Thẻ tín dụng',
            'debit card': 'Thẻ ghi nợ',
            'e-wallet': 'Ví điện tử'
          };
          document.getElementById("detail-paymentMethod").textContent = 
            order.paymentMethod ? paymentMethodMap[order.paymentMethod] || order.paymentMethod : "Chưa có";
          document.getElementById("detail-paidAmount").textContent = order.paidAmount ? formatCurrency(order.paidAmount) : "0 VND";
          
          // Show remaining amount for partial payments
          const remainingRow = document.getElementById("detail-remaining-row");
          if (order.paymentStatus === 'partpaid') {
            document.getElementById("detail-remainingAmount").textContent = 
              formatCurrency((order.totalAmount || 0) - (order.paidAmount || 0));
            remainingRow.style.display = "table-row";
          } else {
            remainingRow.style.display = "none";
          }
          
          // Other info
          document.getElementById("detail-notes").textContent = order.notes || "Không có ghi chú";
          
          // Customer info
    if (order.customerID) {
            document.getElementById("detail-customerName").textContent = order.customerID.fullName || "N/A";
            document.getElementById("detail-customerPhone").textContent = order.customerID.phoneNumber || "N/A";
            document.getElementById("detail-customerEmail").textContent = order.customerID.email || "N/A";
            document.getElementById("detail-customerAddress").textContent = order.customerID.address || "N/A";
    } else {
            document.getElementById("detail-customerName").textContent = "N/A";
            document.getElementById("detail-customerPhone").textContent = "N/A";
            document.getElementById("detail-customerEmail").textContent = "N/A";
            document.getElementById("detail-customerAddress").textContent = "N/A";
          }
          
          // Products
          const productsTable = document.getElementById("detail-products");
          productsTable.innerHTML = "";
    
    if (order.products && order.products.length > 0) {
      order.products.forEach(product => {
        const row = document.createElement("tr");
        const productName = product.name || "Unknown Product";
        const productPrice = product.price || 0;
        const productQuantity = product.quantity || 0;
        const productTotal = productPrice * productQuantity;
        
        // Xử lý thuộc tính của sản phẩm
        let attributesHTML = '';
        if (product.attributes && product.attributes.length > 0) {
          attributesHTML = product.attributes.map(attr => {
            const attrName = attr.name || '';
            let attrValues = '';
            
            if (Array.isArray(attr.value)) {
              attrValues = attr.value.join(', ');
            } else if (typeof attr.value === 'string') {
              attrValues = attr.value;
            }
            
            return `<div> ${attrValues}</div>`;
          }).join('');
        } else {
          attributesHTML = '<div>Không có</div>';
        }
        
        row.innerHTML = `
          <td>${productName}</td>
          <td>${attributesHTML}</td>
          <td>${productQuantity}</td>
          <td>${formatCurrency(productPrice)}</td>
          <td>${formatCurrency(productTotal)}</td>
        `;
        
        productsTable.appendChild(row);
      });
    } else {
      productsTable.innerHTML = `<tr><td colspan="5">Không có sản phẩm</td></tr>`;
    }
          
          // Order totals
          document.getElementById("detail-originalAmount").textContent = formatCurrency(order.originalAmount || 0);
          document.getElementById("detail-totalAmount").textContent = formatCurrency(order.totalAmount || 0);
          
          // Discount info
          const discountRow = document.getElementById("discount-row");
          const discountDisplay = document.getElementById("detail-discount");
          
          if (order.promotionDetails && order.promotionDetails.discountAmount > 0) {
            discountDisplay.textContent = formatCurrency(order.promotionDetails.discountAmount);
            discountRow.style.display = "table-row";
          } else if ((order.originalAmount || 0) > (order.totalAmount || 0)) {
            discountDisplay.textContent = formatCurrency((order.originalAmount || 0) - (order.totalAmount || 0));
            discountRow.style.display = "table-row";
          } else {
            discountRow.style.display = "none";
          }
          
          // Payment history
          const paymentHistorySection = document.querySelector(".payment-history");
          const paymentHistoryTable = document.getElementById("payment-history-tbody");
          paymentHistoryTable.innerHTML = "";
          
          if (order.paymentDetails && order.paymentDetails.length > 0) {
            paymentHistorySection.style.display = "block";
            
            order.paymentDetails.forEach(payment => {
              const row = document.createElement("tr");
              const methodName = paymentMethodMap[payment.method] || payment.method;
              const methodClass = payment.method === 'cash' ? 'method-cash' : 
                                 payment.method === 'credit card' ? 'method-credit' :
                                 payment.method === 'e-wallet' ? 'method-ewallet' : '';
              
        row.innerHTML = `
          <td>
                  <span class="payment-method-badge ${methodClass}">${methodName}</span>
          </td>
                <td>${formatCurrency(payment.amount)}</td>
                <td>${new Date(payment.date).toLocaleString('vi-VN')}</td>
              `;
              
              paymentHistoryTable.appendChild(row);
      });
    } else {
            paymentHistorySection.style.display = "none";
          }
          
          // Hide loading and show details
          detailLoading.style.display = "none";
          detailContainer.style.display = "block";
        } else {
          alert("Không thể tải thông tin hóa đơn");
        }
      })
      .catch(error => {
        console.error('Error fetching order details:', error);
        alert("Có lỗi xảy ra khi tải thông tin hóa đơn");
      });
  }

  // Format currency
  function formatCurrency(value) {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
  }

  // Format short order ID
  function formatShortOrderId(orderID) {
    if (!orderID) return "";
    const parts = orderID.split('-');
    if (parts.length < 2) return orderID;
    
    const prefix = parts[0];
    const code = parts[1].slice(-4);
    return `${prefix}-${code}`;
}
</script>