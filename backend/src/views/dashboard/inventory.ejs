<%- include('../layouts/main.ejs') %>
<div class="main-content">
    <h1 class="text-center mb-4">Quản lý nhập kho</h1>

    <!-- Nút thêm sản phẩm mới -->
    <div class="mb-4 text-end">
        <button type="button" class="btn btn-primary" onclick="openNextBatchModal()">
            <i class="fas fa-plus"></i> Nhập lô hàng tiếp theo
        </button>
        <button type="button" class="btn btn-success" onclick="openBatchImportModal()">
            <i class="fas fa-file-import"></i> Nhập lô hàng mới
        </button>
    </div>

    <!-- Phần hiển thị dữ liệu biến thể -->
    <div id="variantDataDisplay" class="card mb-4 d-none">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Dữ liệu biến thể đã chọn</h5>
        </div>
        <div class="card-body">
            <div id="variantDataContent"></div>
        </div>
    </div>

    <!-- Bộ lọc sản phẩm -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Bộ lọc sản phẩm</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Tên sản phẩm</label>
                    <input type="text" class="form-control" id="filterName" placeholder="Tìm theo tên">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Mã sản phẩm</label>
                    <input type="text" class="form-control" id="filterCode" placeholder="Tìm theo mã">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Danh mục</label>
                    <select class="form-select" id="filterCategory">
                        <option value="">Tất cả danh mục</option>
                        <% typeProducts.forEach(type => { %>
                            <option value="<%= type.name %>"><%= type.name %></option>
                        <% }); %>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Trạng thái</label>
                    <select class="form-select" id="filterStatus">
                        <option value="">Tất cả trạng thái</option>
                        <option value="available">Còn hàng</option>
                        <option value="outofstock">Hết hàng</option>
                    </select>
                </div>
            </div>
            <div class="row g-3 mt-2">
            </div>
            <div class="row mt-3">
                <div class="col-12 text-end">
                    <button type="button" class="btn btn-secondary" id="resetFilter">
                        <i class="fas fa-undo me-1"></i>Đặt lại
                    </button>
                    <button type="button" class="btn btn-primary" id="applyFilter">
                        <i class="fas fa-filter me-1"></i>Lọc
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Danh sách sản phẩm trong kho -->
    <div>
        <table id="inventoryTable" class="table table-hover">
            <thead>
                <tr>
                    <th scope="col" class="text-center">STT</th>
                    <th scope="col">Tên sản phẩm</th>
                    <th scope="col">Mã sản phẩm</th>
                    <th scope="col">Danh mục</th>
                    <th scope="col" class="text-center">Trạng thái</th>
                    <th scope="col" class="text-center">Thao tác</th>
                </tr>
            </thead>
            <tbody id="inventoryTableBody">
                <% inventories.forEach((item, index) => { %>
                    <tr class="inventory-row" data-id="<%= item._id %>">
                        <td class="text-center"><%= index + 1 %></td>
                        <td><%= item.product_name %></td>
                        <td><%= item.product_code %></td>
                        <td><%= item.typeProduct_id?.name || 'N/A' %></td>
                        <td class="text-center">
                            <% if (item.status === 'available') { %>
                                <span class="badge bg-success">Còn hàng</span>
                            <% } else { %>
                                <span class="badge bg-danger">Hết hàng</span>
                            <% } %>
                        </td>
                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-warning" onclick="editInventory('<%= item._id %>')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-primary" onclick="viewDetails('<%= item._id %>')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
        
        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center p-3 border-top mt-2">
            <div class="d-flex align-items-center">
                <label class="text-muted me-2">Hiển thị:</label>
                <select class="form-select form-select-sm" id="itemsPerPage" style="width: auto;">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
                <span class="text-muted ms-2">sản phẩm</span>
            </div>
            <nav aria-label="Inventory navigation">
                <ul class="pagination pagination-sm mb-0">
                    <li class="page-item" id="prevPage">
                        <a class="page-link" href="#" aria-label="Previous">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <span class="page-link" id="currentPage">1</span>
                    </li>
                    <li class="page-item" id="nextPage">
                        <a class="page-link" href="#" aria-label="Next">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                </ul>
            </nav>
            <div class="text-muted">
                Tổng số: <span class="fw-semibold" id="totalItems">0</span> sản phẩm
            </div>
        </div>
    </div>

    <!-- Modal nhập lô hàng tiếp theo -->
    <div class="modal fade" id="nextBatchModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nhập lô hàng tiếp theo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="nextBatchForm" novalidate>
                        <!-- Thông tin lô hàng -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label required">mã lô hàng</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="nextBatchNumber" list="batchSuggestions" placeholder="Nhập mã lô hàng" required autocomplete="off">
                                    <datalist id="batchSuggestions">
                                        <!-- Gợi ý mã lô hàng sẽ được thêm vào đây bằng JavaScript -->
                                    </datalist>
                                    <button type="button" class="btn btn-primary" id="searchBatchBtn">
                                        <i class="fas fa-search"></i> Tìm
                                    </button>
                                </div>
                                <div class="form-text">Nhập mã lô hàng đã có và nhấn "Tìm" để tải dữ liệu</div>
                                <div class="invalid-feedback">Vui lòng nhập mã lô hàng</div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label required">Ngày nhập</label>
                                <input type="date" class="form-control" id="nextBatchDate" required min="2024-03-16">
                                <div class="invalid-feedback">Vui lòng chọn ngày nhập</div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Ghi chú</label>
                            <textarea class="form-control" id="nextBatchNote" rows="2"></textarea>
                        </div>

                        <!-- Danh sách sản phẩm -->
                        <div class="product-list mb-3">
                            <div id="productEntries">
                                <!-- Các sản phẩm sẽ được thêm vào đây -->
                            </div>
                            <button type="button" class="btn btn-outline-primary mt-2" onclick="addNewProductEntry()">
                                <i class="fas fa-plus"></i> Thêm sản phẩm
                            </button>
                        </div>

                        <div class="text-end">
                            <button type="button" class="btn btn-secondary" onclick="resetNextBatchForm()">Làm mới</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                            <button type="submit" class="btn btn-primary">Lưu</button>
                        </div>
                    </form>
                    <div id="batchValidationMessage"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal nhập lô hàng mới -->
    <div class="modal fade" id="batchImportModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nhập lô hàng mới</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="batchImportForm">
                        <!-- Thông tin lô hàng -->
                        <div class="card mb-3">
                            <div class="card-header">
                                <h6 class="mb-0">Thông tin lô hàng</h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">mã lô hàng <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="batchNumber" readonly>
                                        <small class="text-muted">Mã lô hàng sẽ được tạo tự động</small>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Ngày nhập <span class="text-danger">*</span></label>
                                        <input type="date" class="form-control" id="batchDate" required>
                                        <div class="invalid-feedback">Vui lòng chọn ngày nhập</div>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Nhà cung cấp <span class="text-danger">*</span></label>
                                        <select class="form-select batch-provider" id="batchProvider" required>
                                            <option value="">Chọn nhà cung cấp</option>
                                            <% providers.forEach(provider => { %>
                                                <option value="<%= provider._id %>"><%= provider.fullName %></option>
                                            <% }); %>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Ghi chú</label>
                                        <textarea class="form-control" id="batchNote" rows="2"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Danh sách sản phẩm -->
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Danh sách sản phẩm</h6>
                            </div>
                            <div class="card-body">
                                <div id="productsList">
                                    <!-- Template sản phẩm đầu tiên -->
                                    <div class="product-item card mb-3">
                                        <div class="card-body">
                                            <div class="row g-3">
                                                <div class="col-md-6">
                                                    <label class="form-label">Tên sản phẩm <span class="text-danger">*</span></label>
                                                    <input type="text" class="form-control product-name" required>
                                                </div>
                                                <div class="col-md-6" style="display: none;">
                                                    <label class="form-label">Mã sản phẩm</label>
                                                    <input type="text" class="form-control product-code" readonly>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Danh mục <span class="text-danger">*</span></label>
                                                    <select class="form-select product-category" required>
                                                        <option value="">Chọn danh mục</option>
                                                        <% typeProducts.forEach(type => { %>
                                                            <option value="<%= type._id %>" 
                                                                data-variants='<%= JSON.stringify(type.variants) %>'>
                                                                <%= type.name %>
                                                            </option>
                                                        <% }); %>
                                                    </select>
                                                </div>
                                                <div class="col-md-6 common-fields" style="display: none;">
                                                    <label class="form-label">Số lượng <span class="text-danger">*</span></label>
                                                    <input type="number" class="form-control product-quantity" min="1" step="1" required value="1">
                                                </div>
                                                <div class="col-md-6 common-fields" style="display: none;">
                                                    <div class="row">
                                                        <div class="col-md-7">
                                                            <label class="form-label">Giá <span class="text-danger">*</span></label>
                                                            <input type="number" class="form-control product-price" min="0.01" step="0.01" required value="0">
                                                        </div>
                                                        <div class="col-md-5">
                                                            <label class="form-label">Đơn vị</label>
                                                            <input type="text" class="form-control product-unit" value="cái">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-12">
                                                    <div class="form-check mb-3">
                                                        <input type="checkbox" class="form-check-input has-variants" id="hasVariants_${counter}" checked>
                                                        <label class="form-check-label">Sản phẩm này có biến thể khác nhau (kích thước, màu sắc...)</label>
                                                    </div>
                                                </div>
                                                <div class="col-12 variants-section">
                                                    <div class="card">
                                                        <div class="card-header d-flex justify-content-between align-items-center">
                                                            <h6 class="mb-0">Biến thể sản phẩm</h6>
                                                            <button type="button" class="btn btn-primary select-variant">
                                                                <i class="fas fa-plus"></i> Chọn thuộc tính
                                                            </button>
                                                        </div>
                                                        <div class="card-body">
                                                            <div class="variants-list">
                                                                <!-- Variants will be added here -->
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-12">
                                                    <label class="form-label">Mô tả sản phẩm</label>
                                                    <textarea class="form-control product-description" rows="2"></textarea>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-start">
                                <button type="button" class="btn btn-primary" id="addProductBtn">
                                    <i class="fas fa-plus"></i> Thêm sản phẩm
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="saveBatchBtn">Lưu</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal chỉnh sửa sản phẩm -->
    <div id="editInventoryModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title">Chỉnh sửa sản phẩm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editInventoryForm">
                        <input type="hidden" id="editInventoryId">
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label class="form-label">Tên sản phẩm</label>
                                <input type="text" class="form-control" id="editProductName" required maxlength="100">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Mã sản phẩm</label>
                                <input type="text" class="form-control" id="editProductCode" required pattern="^MD\d+$">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">mã lô hàng</label>
                                <input type="text" class="form-control" id="editBatchNumber" readonly>
                            </div>
                            <!-- <div class="col-md-6 mb-3">
                                <label class="form-label">Đơn vị</label>
                                <input type="text" class="form-control" id="editUnit" required>
                            </div> -->
                        </div>
                      
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Danh mục</label>
                                <select class="form-select" id="editTypeProduct" required>
                                    <option value="">Chọn danh mục</option>
                                    <% typeProducts.forEach(type => { %>
                                        <option value="<%= type._id %>"><%= type.name %></option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Nhà cung cấp</label>
                                <select class="form-select" id="editProvider" required>
                                    <option value="">Chọn nhà cung cấp</option>
                                    <% providers.forEach(provider => { %>
                                        <option value="<%= provider._id %>"><%= provider.fullName %></option>
                                    <% }); %>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <!-- Ẩn trường thuộc tính theo yêu cầu nhưng giữ lại giá trị -->
                            <div class="d-none">
                                <input type="hidden" id="editVariantDetails" name="variantDetails">
                            </div>
                        </div>
                        <div class="row edit-common-fields">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Số lượng</label>
                                <input type="number" class="form-control" id="editQuantity" min="0" step="1" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Giá đơn vị</label>
                                <input type="number" class="form-control" id="editPrice" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Mô tả sản phẩm</label>
                            <textarea class="form-control" id="editProductDescription" rows="3" maxlength="500"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Ghi chú</label>
                            <textarea class="form-control" id="editNote" rows="2" maxlength="200"></textarea>
                        </div>
                        <input type="hidden" id="editOriginalStatus">
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Hủy</button>
                            <button type="submit" class="btn btn-warning">Lưu thay đổi</button>
                        </div>
                        <!-- Hidden fields for debugging -->
                        <div class="d-none">
                            <span>Debug ID: <span id="debug-product-id"></span></span>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal xem chi tiết sản phẩm -->
    <div class="modal fade" id="productDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết sản phẩm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <!-- Nội dung chi tiết sẽ được thêm vào đây bằng JavaScript -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Variants -->
    <div class="modal fade" id="variantsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Quản lý biến thể</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Chọn biến thể</label>
                                <select class="form-select" id="variantSelect">
                                    <option value="">-- Chọn biến thể --</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Giá trị</label>
                                <select class="form-select" id="variantValueSelect" disabled>
                                    <option value="">-- Chọn giá trị --</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="addVariantBtn" disabled>Thêm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Messages -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
        <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
        <div id="infoToast" class="toast align-items-center text-white bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body"></div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Khởi tạo biến toàn cục
        window.productCounter = 0;
        window.selectedProduct = null;
        window.selectedVariant = null;
        window.recentBatchNumbers = []; // Biến lưu trữ mã lô hàng gần đây
        window.batchValidated = false;
        window.validatedBatchNumber = null;

        // Pagination variables
        let currentPageIndex = 1;
        let itemsPerPage = 10;
        let filteredInventories = [];

        // Hàm làm tròn số với số chữ số thập phân xác định
        function roundNumber(num, decimals = 2) {
            return Number(Math.round(num + 'e' + decimals) + 'e-' + decimals);
        }

        // Đợi document ready
        $(document).ready(function() {
            // Khởi tạo các event handlers
            initializeEventHandlers();
            
            // Khởi tạo các modal
            initializeModals();
            
            // Khởi tạo pagination
            initializeInventoryPagination();
            
            // Tải các mã lô hàng gần đây để gợi ý
            loadRecentBatchNumbers();
        });

        // Khởi tạo pagination
        function initializeInventoryPagination() {
            // Get all inventory rows
            const rows = Array.from(document.querySelectorAll('#inventoryTableBody tr.inventory-row'));
            
            // Store all inventory items
            filteredInventories = rows;
            
            // Set total items count
            document.getElementById('totalItems').textContent = filteredInventories.length;
            
            // Add event listeners for pagination controls
            document.getElementById('itemsPerPage').addEventListener('change', function() {
                itemsPerPage = parseInt(this.value);
                currentPageIndex = 1; // Reset to first page
                updatePagination();
            });
            
            // Previous page click
            document.getElementById('prevPage').addEventListener('click', function(e) {
                e.preventDefault();
                if (currentPageIndex > 1) {
                    currentPageIndex--;
                    updatePagination();
                }
            });
            
            // Next page click
            document.getElementById('nextPage').addEventListener('click', function(e) {
                e.preventDefault();
                const totalPages = Math.ceil(filteredInventories.length / itemsPerPage);
                if (currentPageIndex < totalPages) {
                    currentPageIndex++;
                    updatePagination();
                }
            });
            
            // Initialize pagination display
            updatePagination();
        }
        
        // Update pagination display and content
        function updatePagination() {
            const totalPages = Math.ceil(filteredInventories.length / itemsPerPage);
            document.getElementById('currentPage').textContent = currentPageIndex;
            document.getElementById('totalItems').textContent = filteredInventories.length;
            
            // Disable/enable previous button
            const prevPageBtn = document.getElementById('prevPage');
            if (currentPageIndex <= 1) {
                prevPageBtn.classList.add('disabled');
            } else {
                prevPageBtn.classList.remove('disabled');
            }
            
            // Disable/enable next button
            const nextPageBtn = document.getElementById('nextPage');
            if (currentPageIndex >= totalPages) {
                nextPageBtn.classList.add('disabled');
            } else {
                nextPageBtn.classList.remove('disabled');
            }
            
            // Display current page items
            displayCurrentPageItems();
        }
        
        // Display items for current page
        function displayCurrentPageItems() {
            const startIndex = (currentPageIndex - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const tableBody = document.getElementById('inventoryTableBody');
            
            // Clear current table content
            tableBody.innerHTML = '';
            
            // If no data
            if (filteredInventories.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="8" class="text-center py-4">Không có sản phẩm nào</td></tr>';
                return;
            }
            
            // Add visible rows
            const visibleRows = filteredInventories.slice(startIndex, endIndex);
            visibleRows.forEach((row, index) => {
                // Update the index number (STT column)
                const indexCell = row.querySelector('td:first-child');
                if (indexCell) {
                    indexCell.textContent = startIndex + index + 1;
                }
                tableBody.appendChild(row.cloneNode(true));
            });
        }
        
        // Khởi tạo event handlers
        function initializeEventHandlers() {
            // Xử lý form nhập lô hàng tiếp theo
            $('#nextBatchForm').on('submit', function(e) {
                e.preventDefault();
                if (validateNextBatchForm()) {
                    // Kiểm tra xem batch đã được tìm kiếm và xác nhận chưa
                    const batchNumber = $('#nextBatchNumber').val()?.trim();
                    if (!window.batchValidated || window.validatedBatchNumber !== batchNumber) {
                        showToast('error', 'Vui lòng tìm kiếm và xác nhận lô hàng trước khi lưu');
                        return;
                    }
                    
                    handleNextBatchSubmit(e);
                } else {
                    showToast('error', 'Vui lòng điền đầy đủ thông tin bắt buộc');
                }
            });
            
            // Xử lý nút tìm kiếm lô hàng
            $('#searchBatchBtn').on('click', function() {
                const batchNumber = $('#nextBatchNumber').val()?.trim();
                if (!batchNumber) {
                    showToast('error', 'Vui lòng nhập mã lô hàng để tìm kiếm');
                    $('#nextBatchNumber').focus();
                    return;
                }
                
                // Reset trạng thái xác thực batch
                window.batchValidated = false;
                window.validatedBatchNumber = null;
                
                searchExistingBatch(batchNumber);
            });
            
            // Xử lý nút xóa sản phẩm
            $(document).on('click', '.remove-next-product', function() {
                const productEntry = $(this).closest('.product-entry');
                productEntry.remove();
                updateProductNumbers();
            });
            
            // Xử lý khi chọn sản phẩm
            $(document).on('change', '.previous-product', handleProductSelection);
            
            // Xử lý khi chọn biến thể
            $(document).on('change', '.variant-select', handleVariantSelection);
        }

        // Khởi tạo các modal
        function initializeModals() {
            // Modal nhập lô hàng tiếp theo
            const nextBatchModal = document.getElementById('nextBatchModal');
            if (nextBatchModal) {
                nextBatchModal.addEventListener('hidden.bs.modal', function() {
                    resetNextBatchForm();
                });
            }
            
            // Modal nhập lô hàng mới
            const batchImportModal = document.getElementById('batchImportModal');
            if (batchImportModal) {
                batchImportModal.addEventListener('hidden.bs.modal', function() {
                    resetBatchImportForm();
                });
            }
        }

        // Reset form nhập lô hàng tiếp theo
        function resetNextBatchForm() {
            if (document.getElementById('nextBatchForm')) {
                document.getElementById('nextBatchForm').reset();
            }
            window.selectedProduct = null;
            window.selectedVariant = null;
            $('#productEntries').empty();
            $('.variant-info').empty();
            window.productCounter = 0;
            addNewProductEntry();
        }

        // Reset form nhập lô hàng mới
        function resetBatchImportForm() {
            if (document.getElementById('batchImportForm')) {
                document.getElementById('batchImportForm').reset();
            }
        }

        // Hàm tải danh sách sản phẩm
        function loadPreviousProducts() {
            fetch('/inventory/products-for-batch')
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'Ok') {
                        $('.previous-product').each(function() {
                            const select = $(this);
                            const currentValue = select.val();
                            select.html('<option value="">Chọn sản phẩm</option>');
                            data.data.forEach(product => {
                                const priceDisplay = product.hasVariants && product.variantDetails?.length > 0
                                    ? product.variantDetails.reduce((sum, v) => sum + (v.price * v.quantity), 0) / product.total_quantity
                                    : product.total_price;
                                select.append(`<option value="${product._id}" 
                                    data-has-variants="${product.hasVariants}"
                                    data-total-price="${priceDisplay || 0}"
                                    data-variants='${JSON.stringify(product.variantDetails || [])}'
                                >${product.product_name} (${product.product_code})</option>`);
                            });
                            if (currentValue) {
                                select.val(currentValue);
                            }
                        });
                    } else {
                        showToast('error', 'Không thể tải danh sách sản phẩm');
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi tải danh sách sản phẩm:', error);
                    showToast('error', 'Có lỗi xảy ra khi tải danh sách sản phẩm');
                });
        }

        // Xử lý khi chọn sản phẩm
        function handleProductSelection() {
            const productEntry = $(this).closest('.product-entry');
            const selectedOption = $(this).find(':selected');
            const hasVariants = selectedOption.data('has-variants') === true;
            const variantDetails = selectedOption.data('variants');
            const totalPrice = parseFloat(selectedOption.data('total-price')) || 0;
            const variantSection = productEntry.find('.variant-selection-section');
            const variantSelect = productEntry.find('.variant-select');
            const priceInput = productEntry.find('.next-price');

            // Reset form fields
            productEntry.find('.next-quantity').val('');
            productEntry.find('.next-price').val('');
            productEntry.find('.variant-info').empty();
            priceInput.prop('readonly', false);

            if (!this.value) {
                variantSection.hide();
                productEntry.find('.variant-info').html(`
                    <div class="alert alert-warning">
                        <p>Vui lòng chọn sản phẩm để tiếp tục.</p>
                    </div>
                `);
                return;
            }

            // Hiển thị thông tin sản phẩm
            productEntry.find('.variant-info').html(`
                <div class="alert alert-info">
                    <h6>Thông tin sản phẩm</h6>
                    <p><strong>Tên sản phẩm:</strong> ${selectedOption.text()}</p>
                    <p><strong>Giá nhập hiện tại:</strong> ${totalPrice ? totalPrice.toLocaleString('vi-VN') + ' đ' : 'Chưa có dữ liệu'}</p>
                    <p class="text-info">Nhập giá đơn vị của sản phẩm.</p>
                </div>
            `);

            if (hasVariants && variantDetails && Array.isArray(variantDetails)) {
                variantSelect.empty().append('<option value="">Chọn phiên bản</option>');
                variantDetails.forEach((variant, index) => {
                    const variantText = Object.entries(variant.attributes || {})
                        .map(([key, value]) => `${key}: ${value}`)
                        .join(', ');
                    variantSelect.append(`<option value="${index}">${variantText}</option>`);
                });
                variantSection.show();
                variantSelect.prop('required', true);
            } else {
                variantSection.hide();
                variantSelect.prop('required', false);
            }
        }

        // Xử lý khi chọn biến thể
        function handleVariantSelection() {
            const productEntry = $(this).closest('.product-entry');
            const selectedProduct = productEntry.find('.previous-product option:selected');
            const variantDetails = selectedProduct.data('variants');
            const selectedVariantIndex = $(this).val();
            const priceInput = productEntry.find('.next-price');

            if (selectedVariantIndex !== '' && variantDetails && Array.isArray(variantDetails)) {
                const variant = variantDetails[selectedVariantIndex];
                const variantPrice = parseFloat(variant.price) || 0;
                const variantText = Object.entries(variant.attributes || {})
                    .map(([key, value]) => `${key}: ${value}`)
                    .join(', ');

                productEntry.find('.variant-info').html(`
                    <div class="alert alert-info">
                        <h6>Thông tin phiên bản</h6>
                        <p><strong>Thuộc tính:</strong> ${variantText}</p>
                        <p><strong>Số lượng hiện tại:</strong> ${variant.quantity || 0}</p>
                        <p><strong>Giá nhập hiện tại:</strong> ${variantPrice ? variantPrice.toLocaleString('vi-VN') + ' đ' : 'Chưa có dữ liệu'}</p>
                        <p class="text-info">Nhập giá đơn vị của sản phẩm.</p>
                    </div>
                `);
                priceInput.val('');
            } else {
                const totalPrice = parseFloat(selectedProduct.data('total-price')) || 0;
                productEntry.find('.variant-info').html(`
                    <div class="alert alert-info">
                        <h6>Thông tin sản phẩm</h6>
                        <p><strong>Tên sản phẩm:</strong> ${selectedProduct.text()}</p>
                        <p><strong>Giá nhập hiện tại:</strong> ${totalPrice ? totalPrice.toLocaleString('vi-VN') + ' đ' : 'Chưa có dữ liệu'}</p>
                        <p class="text-info">Nhập giá đơn vị của sản phẩm.</p>
                    </div>
                `);
                priceInput.val('');
            }
        }

        // Xử lý submit form nhập lô hàng tiếp theo
        function handleNextBatchSubmit(e) {
            try {
                if (e) {
                    e.preventDefault();
                }

                // Kiểm tra thông tin lô hàng
                const batchNumber = $('#nextBatchNumber').val()?.trim();
                const batchDate = $('#nextBatchDate').val()?.trim();

                if (!batchNumber) {
                    showToast('error', 'Vui lòng nhập mã lô hàng');
                    $('#nextBatchNumber').focus();
                    return;
                }

                if (!batchDate) {
                    showToast('error', 'Vui lòng chọn ngày nhập');
                    $('#nextBatchDate').focus();
                    return;
                }

                const products = [];
                let isValid = true;
                let errorMessage = '';

                // Kiểm tra từng sản phẩm
                $('.product-entry').each(function(index) {
                    const $entry = $(this);
                    const selectedProduct = $entry.find('.previous-product option:selected');
                    const productId = selectedProduct.val();

                    if (!productId) {
                        errorMessage = `Vui lòng chọn sản phẩm tại dòng ${index + 1}`;
                        isValid = false;
                        $entry.find('.previous-product').focus();
                        return false;
                    }

                    const hasVariants = selectedProduct.data('has-variants') === true;
                    const quantity = parseInt($entry.find('.next-quantity').val());
                    const price = parseFloat($entry.find('.next-price').val());

                    if (!quantity || isNaN(quantity) || quantity < 1) {
                        errorMessage = `Số lượng phải lớn hơn hoặc bằng 1 cho sản phẩm tại dòng ${index + 1}`;
                        isValid = false;
                        $entry.find('.next-quantity').focus();
                        return false;
                    }

                    if (!price || isNaN(price) || price < 0.01) {
                        errorMessage = `Giá phải lớn hơn hoặc bằng 0.01 cho sản phẩm tại dòng ${index + 1}`;
                        isValid = false;
                        $entry.find('.next-price').focus();
                        return false;
                    }

                    const product = {
                        product_id: productId,
                        quantity: quantity,
                        price: roundNumber(price, 2)
                    };

                    // Xử lý biến thể nếu có
                    if (hasVariants) {
                        const variantSelect = $entry.find('.variant-select');
                        const variantIndex = variantSelect.val();
                        const variantDetails = selectedProduct.data('variants');

                        if (!variantIndex && variantIndex !== '0') {
                            errorMessage = `Vui lòng chọn phiên bản cho sản phẩm tại dòng ${index + 1}`;
                            isValid = false;
                            variantSelect.focus();
                            return false;
                        }

                        if (!variantDetails || !Array.isArray(variantDetails)) {
                            errorMessage = `Dữ liệu biến thể không hợp lệ cho sản phẩm tại dòng ${index + 1}`;
                            isValid = false;
                            return false;
                        }

                        const selectedVariant = variantDetails[parseInt(variantIndex)];
                        if (!selectedVariant || !selectedVariant.attributes) {
                            errorMessage = `Thông tin biến thể không hợp lệ (thiếu thuộc tính) cho sản phẩm tại dòng ${index + 1}`;
                            isValid = false;
                            return false;
                        }

                        product.variantData = {
                            index: parseInt(variantIndex),
                            attributes: selectedVariant.attributes,
                            quantity: quantity,
                            price: roundNumber(price, 2)
                        };
                    }

                    products.push(product);
                });

                if (!isValid) {
                    showToast('error', errorMessage);
                    return;
                }

                if (products.length === 0) {
                    showToast('error', 'Vui lòng thêm ít nhất một sản phẩm');
                    return;
                }

                const formData = {
                    batchInfo: {
                        batch_number: batchNumber,
                        import_date: batchDate,
                        note: $('#nextBatchNote').val()?.trim() || ''
                    },
                    products: products
                };

                // Hiển thị thông báo đang xử lý
                showToast('info', 'Đang xử lý...');

                // Gửi request
                $.ajax({
                    url: '/inventory/next-batch',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        if (response.status === 'Ok') {
                            showToast('success', 'Nhập lô hàng thành công');
                            $('#nextBatchModal').modal('hide');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast('error', response.message || 'Có lỗi xảy ra khi nhập kho');
                        }
                    },
                    error: function(xhr, status, error) {
                        const errorMessage = xhr.responseJSON?.errors
                            ? xhr.responseJSON.errors.join('\n')
                            : (xhr.responseJSON?.message || 'Có lỗi xảy ra khi nhập kho');
                        showToast('error', `Lỗi nhập kho: ${errorMessage}`);
                        $('.product-entry').each(function(index) {
                            const productId = $(this).find('.previous-product').val();
                            const error = xhr.responseJSON?.errors?.find(err => err.includes(productId));
                            if (error) {
                                $(this).find('.variant-info').append(`
                                    <div class="alert alert-danger mt-2">
                                        <strong>Lỗi:</strong> ${error}
                                    </div>
                                `);
                            }
                        });
                    }
                });
            } catch (error) {
                console.error('Lỗi trong handleNextBatchSubmit:', error);
                showToast('error', 'Đã xảy ra lỗi: ' + error.message);
            }
        }

        // Thêm hàm kiểm tra form trước khi submit
        function validateNextBatchForm() {
            const batchNumber = $('#nextBatchNumber').val()?.trim();
            const batchDate = $('#nextBatchDate').val()?.trim();
            const originalDate = $('#nextBatchDate').data('original-date');
            const hasProducts = $('.product-entry').length > 0;
            
            // Kiểm tra ngày nhập phải sau hoặc bằng ngày nhập lô ban đầu
            if (originalDate && batchDate && new Date(batchDate) < new Date(originalDate)) {
                showToast('error', 'Ngày nhập lô mới phải cùng ngày hoặc sau ngày nhập lô đầu tiên');
                $('#nextBatchDate').addClass('is-invalid');
                return false;
            }
            
            // Xóa trạng thái không hợp lệ nếu ngày đã hợp lệ
            $('#nextBatchDate').removeClass('is-invalid');
            
            return batchNumber && batchDate && hasProducts;
        }

        // Hàm tạo HTML cho một sản phẩm mới
        function createProductEntryHtml(index) {
            return `
                <div class="product-entry card mb-3" data-product-index="${index}">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">Sản phẩm #${index + 1}</h6>
                        ${index > 0 ? `
                            <button type="button" class="btn btn-danger btn-sm remove-next-product">
                                <i class="fas fa-trash"></i>
                            </button>
                        ` : ''}
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label>Chọn sản phẩm <span class="text-danger">*</span></label>
                            <select class="form-control previous-product" required>
                                <option value="">Chọn sản phẩm</option>
                            </select>
                        </div>
                        <div class="variant-selection-section" style="display: none;">
                            <div class="form-group mb-3">
                                <label>Chọn phiên bản <span class="text-danger">*</span></label>
                                <select class="form-control variant-select">
                                    <option value="">Chọn phiên bản</option>
                                </select>
                            </div>
                            <div class="variant-info"></div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label>Số lượng <span class="text-danger">*</span></label>
                                    <input type="number" class="form-control next-quantity" required min="1" step="1">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label>Giá nhập <span class="text-danger">*</span></label>
                                    <input type="number" class="form-control next-price" required min="0.01" step="0.01">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Hàm thêm sản phẩm mới
        function addNewProductEntry() {
            const html = createProductEntryHtml(window.productCounter);
            $('#productEntries').append(html);
            loadPreviousProducts();
            window.productCounter++;
        }

        // Hàm tạo mã lô hàng mới
        function generateAndSetBatchNumber() {
            const today = new Date();
            const batchNumber = `LH${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;
            $('#nextBatchNumber, #batchNumber').val(batchNumber);
        }

        // Hàm tạo mã lô hàng ngẫu nhiên
        function generateRandomBatchNumber() {
            const timestamp = new Date().getTime().toString().slice(-6);
            const randomPart = Math.floor(1000 + Math.random() * 9000); // Random 4-digit number
            const batchNumber = `TD-${timestamp}-${randomPart}`;
            $('#batchNumber').val(batchNumber);
        }

        // Hàm hiển thị thông báo
        function showToast(type, message) {
            const toastId = type === 'success' ? 'successToast' : type === 'info' ? 'infoToast' : 'errorToast';
            const toastElement = $(`#${toastId}`);
            toastElement.find('.toast-body').text(message);
            const toast = new bootstrap.Toast(toastElement[0]);
            toast.show();
        }

        // Hàm xem chi tiết sản phẩm
        function viewDetails(productId) {
            if (!productId) {
                showToast('error', 'Không tìm thấy thông tin sản phẩm');
                return;
            }

            $.ajax({
                url: `/inventory/${productId}`,
                method: 'GET',
                success: function(response) {
                    if (response.status === 'Ok' && response.inventory) {
                        const product = response.inventory;
                        
                        // Hiển thị thông tin chi tiết
                        let detailsHtml = `
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Mã sản phẩm:</strong> ${product.product_code}</p>
                                    <p><strong>Tên sản phẩm:</strong> ${product.product_name}</p>
                                    <p><strong>Danh mục:</strong> ${product.typeProduct_id?.name || 'N/A'}</p>
                                    <p><strong>Nhà cung cấp:</strong> ${product.provider_id?.fullName || 'N/A'}</p>
                                    <p><strong>Đơn vị:</strong> ${product.unit || 'N/A'}</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Tổng số lượng:</strong> ${product.total_quantity}</p>
                                    <p><strong>Giá nhập trung bình:</strong> ${(product.total_price || 0).toLocaleString('vi-VN')} đ</p>
                                    <p><strong>Trạng thái:</strong> ${product.status === 'available' ? 'Còn hàng' : 'Hết hàng'}</p>
                                    <p><strong>mã lô hàng:</strong> ${product.batch_number || 'N/A'}</p>
                                    
                                    <!-- Xử lý an toàn với ngày nhập -->
                                    <p><strong>Ngày nhập:</strong> ${(() => {
                                        if (!product.batch_date) return 'N/A';
                                        try {
                                            const batchDate = new Date(product.batch_date);
                                            if (isNaN(batchDate.getTime())) return 'N/A';
                                            return batchDate.toLocaleDateString('vi-VN', { year: 'numeric', month: '2-digit', day: '2-digit' });
                                        } catch (error) {
                                            console.error('Lỗi định dạng ngày:', error);
                                            return 'N/A';
                                        }
                                    })()}</p>
                                </div>
                            </div>
                        `;
                        
                        // Nếu có biến thể, hiển thị thông tin biến thể
                        if (product.hasVariants && product.variantDetails?.length > 0) {
                            detailsHtml += `
                                <div class="mt-4">
                                    <h6 class="mb-3 border-bottom pb-2">Thông tin biến thể</h6>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>Thuộc tính</th>
                                                    <th>Số lượng</th>
                                                    <th>Giá nhập</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                            `;
                            
                            product.variantDetails.forEach(variant => {
                                const attributes = Object.entries(variant.attributes || {})
                                    .map(([key, value]) => `${key}: ${value}`)
                                    .join(', ');
                                detailsHtml += `
                                    <tr>
                                        <td>${attributes}</td>
                                        <td>${variant.quantity}</td>
                                        <td>${(variant.price || 0).toLocaleString('vi-VN')} đ</td>
                                    </tr>
                                `;
                            });
                            
                            detailsHtml += `
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            `;
                        }
                        
                        // Nếu có lịch sử nhập kho, hiển thị lịch sử nhập kho
                        if (product.batch_info?.length > 0) {
                            detailsHtml += `
                                <div class="mt-4">
                                    <h6 class="mb-3 border-bottom pb-2">Lịch sử nhập kho</h6>
                                    <div class="table-responsive">
                                        <table class="table table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>Số lô</th>
                                                    <th>Ngày nhập</th>
                                                    <th>Số lượng</th>
                                                    <th>Giá nhập</th>
                                                    <th>Ghi chú</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                            `;
                            
                            product.batch_info.forEach(batch => {
                                // Xử lý ngày tháng an toàn
                                let dateFormatted = 'N/A';
                                if (batch.batch_date) {
                                    try {
                                        // Kiểm tra xem batch_date có phải là chuỗi ISO hoặc timestamp
                                        const batchDate = new Date(batch.batch_date);
                                        if (!isNaN(batchDate.getTime())) {
                                            dateFormatted = batchDate.toLocaleDateString('vi-VN', { year: 'numeric', month: '2-digit', day: '2-digit' });
                                        }
                                    } catch (error) {
                                        console.error('Lỗi định dạng ngày:', error);
                                    }
                                }
                                
                                detailsHtml += `
                                    <tr>
                                        <td>${batch.batch_number}</td>
                                        <td>${dateFormatted}</td>
                                        <td>${batch.quantity}</td>
                                        <td>${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(batch.price || 0)}</td>
                                        <td>${batch.note || ''}</td>
                                    </tr>
                                `;
                            });
                            
                            detailsHtml += `
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            `;
                        }
                        
                        $('#productDetailsModal .modal-title').text(`Chi tiết sản phẩm - ${product.product_name}`);
                        $('#productDetailsModal .modal-body').html(detailsHtml);
                        const modal = new bootstrap.Modal($('#productDetailsModal')[0]);
                        modal.show();
                    } else {
                        showToast('error', 'Không thể tải thông tin sản phẩm');
                    }
                },
                error: function(xhr) {
                    showToast('error', 'Lỗi khi tải thông tin sản phẩm: ' + (xhr.responseJSON?.message || 'Vui lòng thử lại'));
                }
            });
        }

        // Hàm chỉnh sửa sản phẩm
        function editInventory(productId) {
            if (!productId) {
                showToast('error', 'Không tìm thấy thông tin sản phẩm');
                return;
            }
            
            // Trước tiên, kiểm tra xem sản phẩm đã được phát hành chưa
            $.ajax({
                url: `/inventory/check-published/${productId}`,
                method: 'GET',
                success: function(response) {
                    if (response.status === 'Ok') {
                        if (response.isPublished) {
                            // Nếu sản phẩm đã được phát hành, hiển thị thông báo và không cho phép chỉnh sửa
                            showToast('warning', 'Sản phẩm này đã được phát hành trên trang sản phẩm. Không thể chỉnh sửa!');
                            return;
                        } else {
                            // Nếu sản phẩm chưa được phát hành, tiếp tục quá trình chỉnh sửa
                            showEditForm(productId);
                        }
                    } else {
                        showToast('error', 'Không thể kiểm tra trạng thái xuất bản của sản phẩm');
                    }
                },
                error: function(xhr) {
                    showToast('error', 'Lỗi khi kiểm tra trạng thái xuất bản của sản phẩm: ' + (xhr.responseJSON?.message || 'Vui lòng thử lại'));
                }
            });
        }
        
        // Hàm hiển thị form chỉnh sửa và load dữ liệu
        function showEditForm(productId) {
            // Hiển thị loading và mở modal
            $('#editInventoryModal').modal('show');
            showToast('info', 'Đang tải thông tin sản phẩm...');
            
            // Kiểm tra ID hợp lệ
            if (!productId) {
                showToast('error', 'Không tìm thấy ID sản phẩm');
                $('#editInventoryModal').modal('hide');
                return;
            }
            
            console.log('Đang tải sản phẩm với ID:', productId);
            
            // Tắt nút submit
            $('#editInventoryForm button[type="submit"]').prop('disabled', true);
            
            // Lưu ID vào form và debug element
            $('#editInventoryId').val(productId);
            $('#debug-product-id').text(productId);
            
            $.ajax({
                url: `/inventory/${productId}`,
                method: 'GET',
                success: function(response) {
                    if (response.status === 'Ok' && response.inventory) {
                        const product = response.inventory;
                        
                        // Điền thông tin cơ bản vào form
                        $('#editProductName').val(product.product_name);
                        $('#editProductCode').val(product.product_code);
                        $('#editTypeProduct').val(product.typeProduct_id?._id || '');
                        $('#editProvider').val(product.provider_id?._id || '');
                        $('#editQuantity').val(product.quantity || 0);
                        $('#editPrice').val(product.price || 0);
                        $('#editNote').val(product.note || '');
                        $('#editUnit').val(product.unit || 'cái');
                        $('#editProductDescription').val(product.product_description || '');
                        
                        // Nếu có thông tin lô hàng đầu tiên
                        if (product.batch_info && product.batch_info.length > 0) {
                            const latestBatch = product.batch_info[product.batch_info.length - 1];
                            $('#editBatchNumber').val(latestBatch.batch_number || '');
                            
                            // Format ngày nhập để hiển thị đúng trong input type="date"
                            if (latestBatch.batch_date) {
                                const importDate = new Date(latestBatch.batch_date);
                                const formattedDate = importDate.toISOString().split('T')[0]; // Format: YYYY-MM-DD
                                $('#editBatchDate').val(formattedDate);
                            }
                        }
                        
                        // Xử lý thông tin biến thể nếu có
                        if (product.hasVariants && product.variantDetails?.length > 0) {
                            $('#editHasVariants').prop('checked', true);
                            
                            // Xóa dữ liệu biến thể cũ nếu có
                            $('#editVariantsTable tbody').empty();
                            
                            // Hiển thị container biến thể
                            $('#editVariantsContainer').removeClass('d-none');
                            
                            // Lặp qua từng biến thể để hiển thị
                            product.variantDetails.forEach((variant, index) => {
                                // Kiểm tra và chuẩn hóa dữ liệu thuộc tính
                                let variantAttributes = variant.attributes;
                                
                                // Đảm bảo variantAttributes là đối tượng hợp lệ
                                if (!variantAttributes || typeof variantAttributes !== 'object' || Array.isArray(variantAttributes)) {
                                    console.warn('Thuộc tính biến thể không hợp lệ:', variantAttributes);
                                    variantAttributes = {};
                                }
                                
                                // Tạo chuỗi hiển thị thuộc tính và các input fields
                                let attributesText = '';
                                let attributesInputHtml = '';
                                
                                try {
                                    // Lặp qua từng thuộc tính để tạo giao diện
                                    Object.entries(variantAttributes).forEach(([key, value]) => {
                                        // Thêm vào chuỗi hiển thị
                                        if (attributesText) attributesText += ', ';
                                        attributesText += `${key}: ${value}`;
                                        
                                        // Tạo input field cho thuộc tính này
                                        attributesInputHtml += `
                                            <div class="mb-2">
                                                <label class="form-label">${key}</label>
                                                <input type="text" class="form-control variant-attribute-value" 
                                                    data-attribute-key="${key}" value="${value}" />
                                            </div>
                                        `;
                                    });
                                    
                                    // Hiển thị thông báo nếu không có thuộc tính
                                    if (!attributesText) {
                                        attributesText = 'Không có thuộc tính';
                                    }
                                    
                                    // JSON stringify an chuẩn hóa để không gây lỗi
                                    const safeAttributesJson = JSON.stringify(variantAttributes);
                                    
                                    // Tạo HTML cho hàng biến thể
                                    const variantHtml = `
                                        <tr data-variant-index="${index}">
                                            <td>
                                                <div class="variant-attributes-container">
                                                    <p class="mb-2"><strong>Thuộc tính:</strong> ${attributesText}</p>
                                                    <div class="variant-attributes-inputs">
                                                        ${attributesInputHtml}
                                                    </div>
                                                    <input type="hidden" class="variant-attributes-json" 
                                                        value='${safeAttributesJson}'>
                                                </div>
                                            </td>
                                            <td>
                                                <input type="number" class="form-control variant-quantity" 
                                                    value="${variant.quantity || 0}" min="0" step="1">
                                            </td>
                                            <td>
                                                <input type="number" class="form-control variant-price" 
                                                    value="${variant.price || 0}" min="0" step="1">
                                            </td>
                                        </tr>
                                    `;
                                    
                                    // Thêm vào bảng
                                    $('#editVariantsTable tbody').append(variantHtml);
                                } catch (error) {
                                    console.error('Lỗi khi xử lý biến thể:', error, variant);
                                }
                            });
                            
                            // Ẩn các trường nhập liệu thông thường nếu sản phẩm có biến thể
                            $('.edit-common-fields').addClass('d-none');
                        } else {
                            $('#editHasVariants').prop('checked', false);
                            $('#editVariantsContainer').addClass('d-none');
                            
                            // Hiển thị các trường nhập liệu thông thường
                            $('.edit-common-fields').removeClass('d-none');
                        }
                        
                        // Xóa dữ liệu lô hàng cũ
                        $('#editBatchTable tbody').empty();
                        
                        // Lặp qua từng lô hàng để hiển thị
                        if (product.batch_info && product.batch_info.length > 0) {
                            $('#editBatchInfoContainer').removeClass('d-none');
                            product.batch_info.forEach((batch) => {
                                // Xử lý ngày tháng an toàn
                                let dateToDisplay = 'N/A';
                                if (batch.batch_date) {
                                    try {
                                        // Kiểm tra xem batch_date có phải là chuỗi ISO hoặc timestamp
                                        const batchDate = new Date(batch.batch_date);
                                        if (!isNaN(batchDate.getTime())) {
                                            dateToDisplay = batchDate.toLocaleDateString('vi-VN', { year: 'numeric', month: '2-digit', day: '2-digit' });
                                        }
                                    } catch (error) {
                                        console.error('Lỗi định dạng ngày:', error);
                                    }
                                }
                                
                                const batchHtml = `
                                    <tr>
                                        <td>${batch.batch_number}</td>
                                        <td>${dateToDisplay}</td>
                                        <td>${batch.quantity}</td>
                                        <td>${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(batch.price || 0)}</td>
                                        <td>${batch.note || ''}</td>
                                    </tr>
                                `;
                                
                                $('#editBatchTable tbody').append(batchHtml);
                            });
                        } else {
                            $('#editBatchInfoContainer').addClass('d-none');
                        }
                        
                        // Set trạng thái
                        const status = product.status === 'available' ? 'available' : 'outofstock';
                        $('#editOriginalStatus').val(status);
                        
                        showToast('success', 'Đã tải thông tin sản phẩm');
                        
                        // Bật nút submit
                        $('#editInventoryForm button[type="submit"]').prop('disabled', false);
                    } else {
                        showToast('error', 'Không thể tải thông tin sản phẩm');
                        $('#editInventoryModal').modal('hide');
                    }
                },
                error: function(xhr) {
                    showToast('error', 'Lỗi khi tải thông tin sản phẩm: ' + (xhr.responseJSON?.message || 'Vui lòng thử lại'));
                    $('#editInventoryModal').modal('hide');
                }
            });
        }
        
        // Xử lý submit form chỉnh sửa
        $('#editInventoryForm').on('submit', function(e) {
            e.preventDefault();
            
            // Lấy ID sản phẩm từ form
            const productId = $('#editInventoryId').val();
            
            // Debug log để xác định ID
            console.log('Submit form với ID:', productId, 'Debug ID:', $('#debug-product-id').text());
            
            // Kiểm tra ID sản phẩm
            if (!productId) {
                showToast('error', 'Không tìm thấy ID sản phẩm. Vui lòng tải lại trang và thử lại.');
                return false;
            }
            
            try {
                // Thu thập dữ liệu cơ bản từ form
                const formData = {
                    product_name: $('#editProductName').val()?.trim(),
                    product_code: $('#editProductCode').val()?.trim(),
                    typeProduct_id: $('#editTypeProduct').val(),
                    provider_id: $('#editProvider').val(),
                    unit: $('#editUnit').val()?.trim(),
                    product_description: $('#editProductDescription').val()?.trim() || '',
                    note: $('#editNote').val()?.trim() || ''
                };
                
                // Kiểm tra dữ liệu cơ bản hợp lệ
                if (!formData.product_name || !formData.product_code) {
                    showToast('error', 'Vui lòng điền đầy đủ tên và mã sản phẩm');
                    return false;
                }
                
                // Kiểm tra xem sản phẩm có biến thể không
                const hasVariants = $('#editHasVariants').is(':checked');
                
                if (hasVariants) {
                    // Thu thập dữ liệu về biến thể
                    const variantDetails = [];
                    
                    // Lặp qua từng dòng trong bảng biến thể
                    $('#editVariantsTable tbody tr').each(function() {
                        const $row = $(this);
                        
                        try {
                            // Lấy thuộc tính gốc
                            let attributesJson = $row.find('.variant-attributes-json').val() || '{}';
                            let attributes = {};
                            
                            // Cố gắng parse JSON với xử lý lỗi tốt hơn
                            try {
                                attributes = JSON.parse(attributesJson);
                                // Đảm bảo attributes luôn là một đối tượng
                                if (typeof attributes !== 'object' || attributes === null) {
                                    attributes = {};
                                }
                            } catch (jsonErr) {
                                console.error('Lỗi khi parse JSON:', jsonErr, attributesJson);
                                attributes = {}; // Sử dụng đối tượng trống nếu parse thất bại
                            }
                            
                            // Cập nhật các giá trị thuộc tính đã sửa
                            $row.find('.variant-attribute-value').each(function() {
                                const $input = $(this);
                                const key = $input.data('attribute-key');
                                const value = $input.val();
                                
                                if (key && value !== undefined) {
                                    attributes[key] = value;
                                }
                            });
                            
                            // Lấy số lượng và giá
                            const quantity = parseInt($row.find('.variant-quantity').val());
                            const price = parseInt($row.find('.variant-price').val());

                            // Thêm vào danh sách biến thể
                            variantDetails.push({
                                attributes: attributes,
                                quantity: quantity,
                                price: price
                            });
                            
                        } catch (err) {
                            console.error('Lỗi khi xử lý biến thể:', err);
                        }
                    });
                    
                    // Cập nhật thông tin biến thể
                    formData.hasVariants = true;
                    formData.variantDetails = variantDetails;
                    
                    if (variantDetails.length === 0) {
                        showToast('error', 'Không tìm thấy thông tin biến thể');
                        return false;
                    }
                    
                    // Tính tổng số lượng và giá trung bình
                    const totalQuantity = variantDetails.reduce((sum, v) => sum + (parseInt(v.quantity) || 0), 0);
                    const totalPriceValue = variantDetails.reduce((sum, v) => {
                        const quantity = parseInt(v.quantity) || 0;
                        const price = parseInt(v.price) || 0;
                        return sum + (price * quantity);
                    }, 0);
                    const averagePrice = totalQuantity > 0 ? totalPriceValue / totalQuantity : 0;
                    
                    formData.quantity = totalQuantity;
                    formData.price = averagePrice;
                } else {
                    // Nếu không có biến thể, lấy thông tin từ các trường thông thường
                    formData.hasVariants = false;
                    formData.quantity = parseInt($('#editQuantity').val());
                    formData.price = parseInt($('#editPrice').val());
                    formData.variantDetails = [];
                }
                
                // Hiển thị loading
                showToast('info', 'Đang cập nhật sản phẩm...');
                
                // Debug log để kiểm tra dữ liệu gửi đi
                console.log('Gửi dữ liệu đến API:', `/inventory/update/${productId}`, JSON.stringify(formData));
                
                // Gửi dữ liệu cập nhật
                $.ajax({
                    url: `/inventory/update/${productId}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        console.log('Response success:', response);
                        if (response.status === 'Ok') {
                            showToast('success', 'Cập nhật sản phẩm thành công');
                            $('#editInventoryModal').modal('hide');
                            
                            // Tải lại trang sau 1 giây
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            showToast('error', response.message || 'Lỗi khi cập nhật sản phẩm');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('API error:', xhr.status, xhr.responseText);
                        let errorMsg = 'Lỗi khi cập nhật sản phẩm';
                        
                        try {
                            if (xhr.responseText) {
                                const responseJSON = JSON.parse(xhr.responseText);
                                errorMsg = responseJSON.message || errorMsg;
                            }
                        } catch (e) {
                            // Không làm gì nếu không parse được
                        }
                        
                        showToast('error', errorMsg);
                    }
                });
            } catch (error) {
                console.error('Lỗi khi xử lý form:', error);
                showToast('error', 'Đã xảy ra lỗi: ' + error.message);
                return false;
            }
        });
        
        // Thêm sản phẩm mới vào danh sách
        $('#addProductBtn').click(function() {
            const $productsList = $('#productsList');
            const productCounter = $productsList.find('.product-item').length + 1;
            
            const $newProduct = `
                <div class="product-item card mb-3">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Tên sản phẩm <span class="text-danger">*</span></label>
                                <input type="text" class="form-control product-name" required>
                            </div>
                            <div class="col-md-6" style="display: none;">
                                <label class="form-label">Mã sản phẩm</label>
                                <input type="text" class="form-control product-code" readonly>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Danh mục <span class="text-danger">*</span></label>
                                <select class="form-select product-category" required>
                                    <option value="">Chọn danh mục</option>
                                    <% typeProducts.forEach(type => { %>
                                        <option value="<%= type._id %>" 
                                            data-variants='<%= JSON.stringify(type.variants) %>'>
                                            <%= type.name %>
                                        </option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="col-md-6 common-fields" style="display: none;">
                                <label class="form-label">Số lượng <span class="text-danger">*</span></label>
                                <input type="number" class="form-control product-quantity" min="1" step="1" required value="1">
                            </div>
                            <div class="col-md-6 common-fields" style="display: none;">
                                <div class="row">
                                    <div class="col-md-7">
                                        <label class="form-label">Giá <span class="text-danger">*</span></label>
                                        <input type="number" class="form-control product-price" min="0.01" step="0.01" required value="0">
                                    </div>
                                    <div class="col-md-5">
                                        <label class="form-label">Đơn vị</label>
                                        <input type="text" class="form-control product-unit" value="cái">
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="form-check mb-3">
                                    <input type="checkbox" class="form-check-input has-variants" id="hasVariants_${counter}" checked>
                                    <label class="form-check-label">Sản phẩm này có biến thể khác nhau (kích thước, màu sắc...)</label>
                                </div>
                            </div>
                            <div class="col-12 variants-section">
                                <div class="card">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Biến thể sản phẩm</h6>
                                        <button type="button" class="btn btn-primary select-variant">
                                            <i class="fas fa-plus"></i> Chọn thuộc tính
                                        </button>
                                    </div>
                                    <div class="card-body">
                                        <div class="variants-list">
                                            <!-- Variants will be added here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                <label class="form-label">Mô tả sản phẩm</label>
                                <textarea class="form-control product-description" rows="2"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            $productsList.append($newProduct);
        });

        // Xóadagger
        $(document).on('click', '.remove-product', function() {
            $(this).closest('.product-item').remove();
        });

        // Xử lý checkbox biến thể
        $(document).on('change', '.has-variants', function() {
            const $productItem = $(this).closest('.product-item');
            const $variantsSection = $productItem.find('.variants-section');
            const $commonFields = $productItem.find('.common-fields');
            
            if ($(this).is(':checked')) {
                $variantsSection.removeClass('d-none');
                $commonFields.addClass('d-none');
            } else {
                $variantsSection.addClass('d-none');
                $commonFields.removeClass('d-none');
                $variantsSection.find('.variants-list').empty();
            }
        });

        // Mở cửa sổ chọn biến thể
        $(document).on('click', '.select-variant', function() {
            const $productItem = $(this).closest('.product-item');
            const typeProductId = $productItem.find('.product-category').val();
            
            if (!typeProductId) {
                showToast('error', 'Vui lòng chọn danh mục sản phẩm trước');
                return;
            }
            
            const variantWindow = window.open(`/products/variants?typeProductId=${typeProductId}`, 'Chọn biến thể', 
                'width=800,height=600,menubar=no,toolbar=no');
            
            window.removeEventListener('message', handleVariantMessage);
            
            function handleVariantMessage(event) {
                if (event.data.variants) {
                    const variants = event.data.variants;
                    const $variantsList = $productItem.find('.variants-list');
                    
                    $variantsList.empty();
                    
                    variants.forEach(variantGroup => {
                        const variantHtml = `
                            <div class="variant-item mb-3">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="form-label">Thuộc tính</label>
                                        <input type="text" class="form-control" value="${variantGroup.map(v => `${v.name}: ${v.value}`).join(', ')}" readonly>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Số lượng <span class="text-danger">*</span></label>
                                        <input type="number" class="form-control variant-quantity" placeholder="Số lượng" min="1" required>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Giá <span class="text-danger">*</span></label>
                                        <input type="number" class="form-control variant-price" placeholder="Giá" min="0" required>
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-danger remove-variant">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                        $variantsList.append(variantHtml);
                    });
                    
                    window.removeEventListener('message', handleVariantMessage);
                }
            }
            
            window.addEventListener('message', handleVariantMessage);
        });

        // Xóa biến thể
        $(document).on('click', '.remove-variant', function() {
            $(this).closest('.variant-item').remove();
        });

        // Tự động tạo mã sản phẩm khi nhập tên
        $(document).on('input', '.product-name', function() {
            const $productCode = $(this).closest('.product-item').find('.product-code');
            const name = $(this).val().trim();
            
            if (name) {
                $.get('/inventory/last-code')
                    .then(response => {
                        if (response.status === 'Ok') {
                            const lastCode = response.data || 'MD000';
                            const numberPart = parseInt(lastCode.replace('MD', '')) || 0;
                            const newCode = `MD${String(numberPart + 1).padStart(3, '0')}`;
                            $productCode.val(newCode);
                        }
                    })
                    .catch(error => {
                        console.error('Lỗi khi lấy mã sản phẩm cuối cùng:', error);
                    });
            } else {
                $productCode.val('');
            }
        });

        // Lưu lô hàng
        $('#saveBatchBtn').click(function() {
            const batchNumber = $('#batchNumber').val()?.trim();
            const batchDate = $('#batchDate').val()?.trim();
            const batchProvider = $('#batchProvider').val();
            
            if (!batchNumber) {
                showToast('error', 'Lỗi: Mã lô hàng không được tạo');
                generateRandomBatchNumber(); // Try to regenerate
                return;
            }
            
            if (!batchDate) {
                showToast('error', 'Vui lòng chọn ngày nhập');
                $('#batchDate').focus();
                return;
            }

            if (!batchProvider) {
                showToast('error', 'Vui lòng chọn nhà cung cấp');
                $('#batchProvider').focus();
                return;
            }

            const products = [];
            let hasError = false;
            let errorMessage = '';

            $('.product-item').each(function(index) {
                const $item = $(this);
                const hasVariants = $item.find('.has-variants').is(':checked');
                
                const productName = $item.find('.product-name').val()?.trim();
                const typeProductId = $item.find('.product-category').val();

                if (!productName) {
                    errorMessage = `Vui lòng nhập tên sản phẩm tại dòng ${index + 1}`;
                    hasError = true;
                    $item.find('.product-name').focus();
                    return false;
                }
                
                if (!typeProductId) {
                    errorMessage = `Vui lòng chọn danh mục cho sản phẩm "${productName}"`;
                    hasError = true;
                    $item.find('.product-category').focus();
                    return false;
                }

                const baseProduct = {
                    product_name: productName,
                    product_code: $item.find('.product-code').val(),
                    product_description: $item.find('.product-description').val()?.trim() || '',
                    typeProduct_id: typeProductId,
                    provider_id: batchProvider,
                    unit: $item.find('.product-unit').val()?.trim() || 'cái',
                    hasVariants: hasVariants
                };

                if (hasVariants) {
                    const variants = [];
                    let variantError = false;
                    
                    $item.find('.variant-item').each(function(variantIndex) {
                        const $variant = $(this);
                        const quantity = parseInt($variant.find('.variant-quantity').val());
                        const price = parseFloat($variant.find('.variant-price').val());

                        if (!quantity || quantity <= 0) {
                            errorMessage = `Vui lòng nhập số lượng hợp lệ cho biến thể ${variantIndex + 1} của sản phẩm "${productName}"`;
                            variantError = true;
                            $variant.find('.variant-quantity').focus();
                            return false;
                        }
                        
                        if (!price || price <= 0) {
                            errorMessage = `Vui lòng nhập giá hợp lệ cho biến thể ${variantIndex + 1} của sản phẩm "${productName}"`;
                            variantError = true;
                            $variant.find('.variant-price').focus();
                            return false;
                        }

                        variants.push({
                            attributes: $variant.find('input[readonly]').val(),
                            quantity: quantity,
                            price: roundNumber(price, 2)
                        });
                    });

                    if (variantError) {
                        hasError = true;
                        return false;
                    }

                    if (variants.length === 0) {
                        errorMessage = `Vui lòng thêm ít nhất một biến thể cho sản phẩm "${productName}"`;
                        hasError = true;
                        return false;
                    }

                    baseProduct.variants = variants;
                } else {
                    const quantity = parseInt($item.find('.product-quantity').val());
                    const price = parseFloat($item.find('.product-price').val());
                    
                    if (!quantity || quantity <= 0) {
                        errorMessage = `Số lượng phải lớn hơn hoặc bằng 1 cho sản phẩm "${productName}"`;
                        hasError = true;
                        $item.find('.product-quantity').focus();
                        return false;
                    }
                    
                    if (!price || price <= 0) {
                        errorMessage = `Giá phải lớn hơn hoặc bằng 0.01 cho sản phẩm "${productName}"`;
                        hasError = true;
                        $item.find('.product-price').focus();
                        return false;
                    }

                    baseProduct.quantity = quantity;
                    baseProduct.price = roundNumber(price, 2);
                }

                products.push(baseProduct);
            });

            if (hasError) {
                showToast('error', errorMessage);
                return;
            }

            if (products.length === 0) {
                showToast('error', 'Vui lòng thêm ít nhất một sản phẩm');
                return;
            }

            const formData = {
                batchInfo: {
                    batch_number: batchNumber,
                    import_date: batchDate,
                    note: $('#batchNote').val()?.trim() || ''
                },
                products: products
            };

            showToast('info', 'Đang xử lý...');
            
            $.ajax({
                url: '/inventory/batch-import',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.status === 'Success') {
                        showToast('success', 'Nhập lô hàng thành công');
                        setTimeout(() => {
                            $('#batchImportModal').modal('hide');
                            location.reload();
                        }, 1000);
                    } else {
                        showToast('error', response.message || 'Có lỗi xảy ra khi nhập kho');
                    }
                },
                error: function(xhr, status, error) {
                    const errorMessage = xhr.responseJSON?.message || 'Có lỗi xảy ra khi nhập kho';
                    showToast('error', errorMessage);
                }
            });
        });

        // Hàm cập nhật số thứ tự sản phẩm
        function updateProductNumbers() {
            $('.product-entry').each(function(index) {
                $(this).attr('data-product-index', index);
                $(this).find('.card-header h6').text(`Sản phẩm #${index + 1}`);
            });
        }

        // Xử lý lọc dữ liệu
        $('#applyFilter').click(function() {
            applyFilters();
        });

        // Đặt lại bộ lọc
        $('#resetFilter').click(function() {
            $('#filterName').val('');
            $('#filterCode').val('');
            $('#filterCategory').val('');
            $('#filterStatus').val('');
            $('#filterMinPrice').val('');
            $('#filterMaxPrice').val('');
            $('#filterMinStock').val('');
            $('#filterMaxStock').val('');
            applyFilters();
        });

        // Thêm sự kiện input để lọc theo tên và mã khi gõ
        $('#filterName, #filterCode').on('input', function() {
            applyFilters();
        });

        // Thêm sự kiện input để lọc theo giá
        $('#filterMinPrice, #filterMaxPrice').on('input', function() {
            applyFilters();
        });

        // Thêm sự kiện input để lọc theo tồn kho
        $('#filterMinStock, #filterMaxStock').on('input', function() {
            applyFilters();
        });

        // Thêm sự kiện change cho select box
        $('#filterCategory, #filterStatus').change(function() {
            applyFilters();
        });

        // Hàm áp dụng bộ lọc
        function applyFilters() {
            const nameFilter = $('#filterName').val().toLowerCase();
            const codeFilter = $('#filterCode').val().toLowerCase();
            const categoryFilter = $('#filterCategory').val();
            const statusFilter = $('#filterStatus').val();
            
            // Lọc dữ liệu dựa trên giá trị nhập vào
            $('#inventoryTable tbody tr').each(function() {
                const $row = $(this);
                const name = $row.find('td:nth-child(2)').text().toLowerCase(); // Cột tên sản phẩm
                const code = $row.find('td:nth-child(3)').text().toLowerCase(); // Cột mã sản phẩm
                const category = $row.find('td:nth-child(4)').text().trim(); // Cột danh mục
                const status = $row.find('td:nth-child(5) .badge').hasClass('bg-success') ? 'available' : 'outofstock'; // Cột trạng thái
                
                // Kiểm tra từng điều kiện lọc
                const nameMatch = name.includes(nameFilter);
                const codeMatch = code.includes(codeFilter);
                const categoryMatch = !categoryFilter || category === categoryFilter;
                const statusMatch = !statusFilter || status === statusFilter;
                
                // Hiển thị hoặc ẩn dòng dựa vào kết quả lọc
                if (nameMatch && codeMatch && categoryMatch && statusMatch) {
                    $row.show();
                } else {
                    $row.hide();
                }
            });
            
            // Cập nhật số lượng hiển thị
            updateVisibleItems();
        }
        
        // Cập nhật hiển thị số lượng mục
        function updateVisibleItems() {
            const visibleCount = $('#inventoryTable tbody tr:visible').length;
            $('#totalItems').text(visibleCount);
            
            // Cập nhật số thứ tự cho các hàng đang hiển thị
            $('#inventoryTable tbody tr:visible').each(function(index) {
                $(this).find('td:first-child').text(index + 1);
            });
            
            // Hiển thị thông báo nếu không có kết quả
            if (visibleCount === 0) {
                if ($('#inventoryTable tbody tr.no-data').length === 0) {
                    $('#inventoryTable tbody').append('<tr class="no-data"><td colspan="6" class="text-center py-3">Không tìm thấy sản phẩm nào phù hợp</td></tr>');
                }
            } else {
                $('#inventoryTable tbody tr.no-data').remove();
            }
        }
    </script>

    <script>
        // Hàm tìm kiếm lô hàng đã tồn tại
        function searchExistingBatch(batchNumber) {
            showToast('info', 'Đang tìm kiếm lô hàng...');
            
            $.ajax({
                url: `/inventory/batch/${batchNumber}`,
                method: 'GET',
                success: function(response) {
                    if (response.status === 'Ok' && response.batch) {
                        loadBatchData(response.batch);
                        showToast('success', 'Đã tìm thấy lô hàng');
                        
                        // Đánh dấu batch đã được xác nhận
                        window.batchValidated = true;
                        window.validatedBatchNumber = batchNumber;
                        
                        // Tự động cập nhật ngày nhập thành ngày hiện tại
                        const today = new Date().toISOString().split('T')[0];
                        $('#nextBatchDate').val(today);
                        
                        // Hiển thị thông báo xác nhận
                        $('#batchValidationMessage').html(`
                            <div class="alert alert-success mt-2">
                                <i class="fas fa-check-circle me-2"></i>Đã xác nhận lô hàng ${batchNumber}
                            </div>
                        `).show();
                    } else {
                        showToast('error', response.message || 'Không tìm thấy lô hàng này');
                        $('#batchValidationMessage').html(`
                            <div class="alert alert-danger mt-2">
                                <i class="fas fa-exclamation-circle me-2"></i>Lô hàng không tồn tại
                            </div>
                        `).show();
                    }
                },
                error: function(xhr) {
                    showToast('error', `Lỗi khi tìm kiếm lô hàng: ${xhr.responseJSON?.message || 'Vui lòng thử lại'}`);
                    $('#batchValidationMessage').html(`
                        <div class="alert alert-danger mt-2">
                            <i class="fas fa-exclamation-circle me-2"></i>Lỗi khi tìm kiếm lô hàng
                        </div>
                    `).show();
                }
            });
        }
        
        // Hàm nạp dữ liệu lô hàng
        function loadBatchData(batchData) {
            // Reset form
            resetNextBatchForm();
            
            // Nạp dữ liệu cơ bản của lô hàng
            $('#nextBatchNumber').val(batchData.batch_number);
            // Đặt ngày nhập là ngày hiện tại thay vì ngày từ dữ liệu
            const today = new Date().toISOString().split('T')[0];
            $('#nextBatchDate').val(today);
            $('#nextBatchNote').val(batchData.note || '');
            
            // Lưu trữ ngày nhập lô ban đầu để kiểm tra tính hợp lệ
            const originalImportDate = batchData.batch_date ? new Date(batchData.batch_date).toISOString().split('T')[0] : '';
            $('#nextBatchDate').attr('min', originalImportDate);
            $('#nextBatchDate').data('original-date', originalImportDate);
            
            // Xóa các sản phẩm hiện tại
            $('#productEntries').empty();
            window.productCounter = 0;
            
            // Nếu lô hàng này có sản phẩm, thêm chúng vào
            if (batchData.products && Array.isArray(batchData.products) && batchData.products.length > 0) {
                // Tải danh sách sản phẩm trước
                $.ajax({
                    url: '/inventory/products-for-batch',
                    method: 'GET',
                    success: function(productsResponse) {
                        if (productsResponse.status === 'Ok') {
                            // Hàm để tìm sản phẩm theo ID
                            const findProductById = (productId) => {
                                return productsResponse.data.find(product => product._id === productId);
                            };
                            
                            // Thêm các sản phẩm trong lô hàng
                            batchData.products.forEach((productData, index) => {
                                // Tạo mục sản phẩm mới
                                const productHtml = createProductEntryHtml(window.productCounter);
                                $('#productEntries').append(productHtml);
                                
                                const $productEntry = $('.product-entry').last();
                                const $productSelect = $productEntry.find('.previous-product');
                                
                                // Tạo options cho select - lựa chọn sản phẩm phải sau khi dữ liệu có
                                $productSelect.html('<option value="">Chọn sản phẩm</option>');
                                productsResponse.data.forEach(product => {
                                    const priceDisplay = product.hasVariants && product.variantDetails?.length > 0
                                        ? product.variantDetails.reduce((sum, v) => sum + (v.price * v.quantity), 0) / product.total_quantity
                                        : product.total_price;
                                    $productSelect.append(`<option value="${product._id}" 
                                        data-has-variants="${product.hasVariants}"
                                        data-total-price="${priceDisplay || 0}"
                                        data-variants='${JSON.stringify(product.variantDetails || [])}'
                                    >${product.product_name} (${product.product_code})</option>`);
                                });
                                
                                // Đặt giá trị đã chọn
                                $productSelect.val(productData.product_id);
                                
                                // Đợi một chút để đảm bảo DOM đã cập nhật
                                setTimeout(() => {
                                    // Kích hoạt thay đổi để hiển thị thông tin sản phẩm
                                    $productSelect.trigger('change');
                                    
                                    // Đặt số lượng và giá
                                    $productEntry.find('.next-quantity').val(productData.quantity || 0);
                                    $productEntry.find('.next-price').val(productData.price || 0);
                                    
                                    // Xử lý biến thể nếu có
                                    if (productData.variantData && productData.variantData.hasOwnProperty('index')) {
                                        // Tìm sản phẩm để lấy danh sách biến thể
                                        const product = findProductById(productData.product_id);
                                        if (product && product.hasVariants) {
                                            // Hiển thị phần biến thể
                                            const $variantSection = $productEntry.find('.variant-selection-section');
                                            const $variantSelect = $productEntry.find('.variant-select');
                                            
                                            $variantSection.show();
                                            
                                            // Điền các tùy chọn biến thể
                                            if (product.variantDetails && Array.isArray(product.variantDetails)) {
                                                $variantSelect.empty().append('<option value="">Chọn phiên bản</option>');
                                                product.variantDetails.forEach((variant, idx) => {
                                                    const variantText = Object.entries(variant.attributes || {})
                                                        .map(([key, value]) => `${key}: ${value}`)
                                                        .join(', ');
                                                    $variantSelect.append(`<option value="${idx}">${variantText}</option>`);
                                                });
                                                
                                                // Đặt biến thể đã chọn
                                                $variantSelect.val(productData.variantData.index);
                                                $variantSelect.trigger('change');
                                            }
                                        }
                                    }
                                }, 100);
                                
                                window.productCounter++;
                            });
                        } else {
                            showToast('error', 'Không thể tải danh sách sản phẩm');
                        }
                    },
                    error: function() {
                        showToast('error', 'Lỗi khi tải danh sách sản phẩm');
                    }
                });
            } else {
                // Nếu không có sản phẩm, thêm một mục sản phẩm trống
                addNewProductEntry();
            }
        }

        // Hàm mở modal nhập lô hàng tiếp theo
        function openNextBatchModal() {
            // Reset form và biến đếm
            $('#nextBatchForm')[0].reset();
            $('#productEntries').empty();
            window.productCounter = 0;
            
            // Thêm sản phẩm đầu tiên
            addNewProductEntry();
            
            // Đặt ngày mặc định là ngày hiện tại
            const today = new Date().toISOString().split('T')[0];
            $('#nextBatchDate').val(today);
            
            // Đặt thuộc tính min để không cho phép chọn ngày trong quá khứ
            $('#nextBatchDate').attr('min', today);
            
            // Thêm sự kiện kiểm tra ngày
            $('#nextBatchDate').off('change').on('change', function() {
                const selectedDate = $(this).val();
                const todayDate = new Date().toISOString().split('T')[0];
                
                // Kiểm tra xem ngày được chọn có nhỏ hơn ngày hiện tại không
                if (selectedDate && new Date(selectedDate) < new Date(todayDate)) {
                    $(this).addClass('is-invalid');
                    $(this).next('.invalid-feedback').text('Vui lòng chọn ngày hiện tại hoặc trong tương lai');
                    showToast('error', 'Không thể chọn ngày trong quá khứ');
                    // Đặt lại về ngày hiện tại
                    $(this).val(todayDate);
                } else {
                    $(this).removeClass('is-invalid');
                }
                
                // Kiểm tra với ngày ban đầu nếu đang làm việc với lô đã có
                const originalDate = $(this).data('original-date');
                if (originalDate && selectedDate) {
                    if (new Date(selectedDate) < new Date(originalDate)) {
                        $(this).addClass('is-invalid');
                        $(this).next('.invalid-feedback').text('Ngày nhập lô mới phải cùng ngày hoặc sau ngày nhập lô đầu tiên');
                        showToast('error', 'Ngày nhập lô mới phải cùng ngày hoặc sau ngày nhập lô đầu tiên');
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                }
            });
            
            // Tạo mã lô hàng
            generateAndSetBatchNumber();
            
            // Khởi tạo các toast
            ['successToast', 'errorToast', 'infoToast'].forEach(toastId => {
                const toastElement = document.getElementById(toastId);
                if (toastElement && !toastElement._toast) {
                    toastElement._toast = new bootstrap.Toast(toastElement);
                }
            });
            
            // Hiển thị modal
            const modal = new bootstrap.Modal($('#nextBatchModal')[0]);
            modal.show();
        }

        // Hàm mở modal nhập lô hàng mới
        function openBatchImportModal() {
            // Reset form
            $('#batchImportForm')[0].reset();
            
            // Đặt ngày mặc định
            const today = new Date().toISOString().split('T')[0];
            $('#batchDate').val(today);
            
            // Đặt thuộc tính min để không cho phép chọn ngày trong quá khứ
            $('#batchDate').attr('min', today);
            
            // Thêm sự kiện kiểm tra ngày
            $('#batchDate').off('change').on('change', function() {
                const selectedDate = $(this).val();
                const todayDate = new Date().toISOString().split('T')[0];
                
                // Kiểm tra xem ngày được chọn có nhỏ hơn ngày hiện tại không
                if (selectedDate && new Date(selectedDate) < new Date(todayDate)) {
                    $(this).addClass('is-invalid');
                    $(this).next('.invalid-feedback').text('Vui lòng chọn ngày hiện tại hoặc trong tương lai');
                    showToast('error', 'Không thể chọn ngày trong quá khứ');
                    // Đặt lại về ngày hiện tại
                    $(this).val(todayDate);
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
            
            // Tạo mã lô hàng
            generateRandomBatchNumber();
            
            // Xóa danh sách sản phẩm trừ sản phẩm đầu tiên
            const $productsList = $('#productsList');
            const $firstProduct = $productsList.children().first().clone();
            $productsList.empty().append($firstProduct);
            
            // Hiển thị modal
            const modal = new bootstrap.Modal($('#batchImportModal'));
            modal.show();
        }
    </script>

    <script>
        // Hàm tải danh sách mã lô hàng gần đây để gợi ý
        function loadRecentBatchNumbers() {
            fetch('/inventory/recent-batch-numbers')
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'Ok' && Array.isArray(data.batchNumbers)) {
                        window.recentBatchNumbers = data.batchNumbers;
                        updateBatchSuggestions();
                    }
                })
                .catch(error => {
                    console.error('Lỗi khi tải mã lô hàng:', error);
                });
        }

        // Hàm cập nhật gợi ý mã lô hàng
        function updateBatchSuggestions() {
            const datalist = document.getElementById('batchSuggestions');
            if (!datalist) return;
            
            // Xóa các gợi ý cũ
            datalist.innerHTML = '';
            
            // Thêm các gợi ý mới
            window.recentBatchNumbers.forEach(batchNumber => {
                const option = document.createElement('option');
                option.value = batchNumber;
                datalist.appendChild(option);
            });
        }

        // Thêm xử lý sự kiện khi người dùng nhập vào ô tìm kiếm mã lô hàng
        $('#nextBatchNumber').on('input', function() {
            const input = $(this).val().trim().toLowerCase();
            
            if (input.length > 0) {
                // Lọc các mã lô hàng phù hợp với input
                const filteredSuggestions = window.recentBatchNumbers.filter(
                    batch => batch.toLowerCase().includes(input)
                );
                
                // Cập nhật danh sách gợi ý
                const datalist = document.getElementById('batchSuggestions');
                datalist.innerHTML = '';
                
                filteredSuggestions.forEach(batchNumber => {
                    const option = document.createElement('option');
                    option.value = batchNumber;
                    datalist.appendChild(option);
                });
            }
        });
    </script>

    <style>
    .variants-list {
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
    }

    .variant-item {
        background-color: #f8f9fa;
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .variant-item:hover {
        background-color: #e9ecef;
    }

    .variant-item:last-child {
        margin-bottom: 0;
    }

    .card {
        border: 1px solid #dee2e6;
        border-radius: 8px;
    }

    .card-body {
        padding: 1.25rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .product-form {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    #variantInfo .alert {
        margin-bottom: 0;
        border-left: 4px solid #0d6efd;
    }

    #variantInfo .alert h6 {
        color: #0d6efd;
        margin-bottom: 10px;
        font-weight: 600;
    }

    #variantInfo .alert p {
        margin-bottom: 5px;
        color: #495057;
    }

    #variantInfo .alert p:last-child {
        margin-bottom: 0;
    }

    #variantInfo .alert strong {
        color: #212529;
    }

    .form-select {
        padding: 0.5rem;
        border-radius: 4px;
        border: 1px solid #ced4da;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .form-select:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .form-control:disabled,
    .form-control[readonly] {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .modal-header {
        border-bottom: 2px solid rgba(0,0,0,0.1);
    }

    .modal-content {
        border: none;
        border-radius: 8px;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .modal-body {
        padding: 1.5rem;
    }

    .toast {
        border-radius: 8px;
        box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.1);
    }

    .toast-container {
        z-index: 1060;
    }
    #itemsPerPage {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;

  padding-right: 24px; /* Tạo khoảng trống bên phải cho mũi tên */
  background: url('data:image/svg+xml;utf8,<svg fill="gray" height="16" viewBox="0 0 24 24" width="16" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>') no-repeat right 8px center;
  background-size: 16px;
}

    </style>
</div>