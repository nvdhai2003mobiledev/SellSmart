<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Danh sách sản phẩm và tài liệu</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    :root {
      --primary-color: #4f46e5;
      --primary-hover: #4338ca;
      --secondary-color: #6366f1;
      --accent-color: #818cf8;
      --background-color: #f1f5f9;
      --card-bg: #ffffff;
      --text-color: #1e293b;
      --text-muted: #64748b;
      --border-color: #e2e8f0;
      --card-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body { 
      font-family: 'Montserrat', 'Segoe UI', system-ui, -apple-system, sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      line-height: 1.6;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 3rem 2rem;
    }

    .app-logo {
      text-align: center;
      margin-bottom: 3rem;
    }

    .app-logo img {
      height: 80px;
    }

    .app-logo .brand-text {
      font-size: 2rem;
      font-weight: 700;
      color: var(--primary-color);
      margin-top: 0.5rem;
      display: block;
    }

    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      padding: 1rem 0;
    }

    .product-card {
      background: var(--card-bg);
      border-radius: 1rem;
      overflow: hidden;
      box-shadow: var(--card-shadow);
      cursor: pointer;
      transition: all 0.3s ease;
      border: 1px solid var(--border-color);
    }

    .product-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .product-image {
      width: 100%;
      height: 220px;
      object-fit: contain;
      background: #fff;
      padding: 1rem;
    }

    .product-info {
      padding: 1.5rem;
      border-top: 1px solid var(--border-color);
      background: linear-gradient(to bottom, var(--card-bg), var(--background-color));
    }

    .product-name {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-color);
      margin-bottom: 0.5rem;
    }

    .product-docs {
      color: var(--text-muted);
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .product-docs i {
      color: var(--primary-color);
    }

    .social-buttons {
      position: fixed;
      right: 1rem;
      bottom: 6rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      z-index: 100;
    }

    .social-button {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      cursor: pointer;
      transition: transform 0.2s;
      text-decoration: none;
    }

    .social-button:hover {
      transform: scale(1.1);
    }

    .social-button.warranty {
      background-color: #ff9800;
    }

    .social-button.phone {
      background-color: #4CAF50;
    }

    .social-button.zalo {
      background-color: #0068ff;
      padding: 6px;
    }
    
    .zalo-icon {
      width: 100%;
      height: 100%;
      object-fit: contain;
      display: block;
    }

    /* Header styles */
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 30px;
      background-color: #fff;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      position: sticky;
      top: 0;
      z-index: 1000;
    }

    .logo-container {
      display: flex;
      align-items: center;
      margin: 0 auto;
    }

    .logo {
      height: 40px;
      margin-right: 10px;
    }

    .brand-text {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--primary-color);
    }

    /* Modal styles */
    .modal-title {
      color: var(--primary-color);
      font-weight: 600;
    }

    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
    }

    .text-danger {
      color: #dc3545;
    }

    .btn-primary {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }

    .btn-primary:hover {
      background-color: var(--primary-hover);
      border-color: var(--primary-hover);
    }

    .invalid-feedback {
      display: none;
      width: 100%;
      margin-top: 0.25rem;
      font-size: 0.875em;
      color: #dc3545;
    }
  </style>
</head>
<body>
  <!-- Header with Logo -->
  <div class="header">
    <div class="logo-container">
      <img src="/images/logo.png" alt="Logo" class="logo">
      <span class="brand-text">SellSmart</span>
    </div>
  </div>

  <div class="container">
    <div class="app-logo">
    </div>

    <div class="products-grid">
      <% let productDocs = {}; %>
      <% documents.forEach(function(doc) { %>
        <% if (doc.product_id) { %>
          <% const productId = doc.product_id._id; %>
          <% if (!productDocs[productId]) { %>
            <% productDocs[productId] = { 
              name: doc.product_id.name, 
              thumbnail: doc.product_id.thumbnail, 
              documents: [] 
            }; %>
          <% } %>
          <% productDocs[productId].documents.push(doc); %>
        <% } %>
      <% }); %>

      <% Object.entries(productDocs).forEach(([productId, product]) => { %>
        <div class="product-card" onclick="goToDocumentPage('<%= productId %>')">
          <div>
            <img src="<%= product.thumbnail || '/img/default-product.jpg' %>" alt="<%= product.name %>" class="product-image">
          </div>
          <div class="product-info">
            <h3 class="product-name"><%= product.name %></h3>
            <div class="product-docs">
              <i class="fas fa-file-alt"></i>
              <span><%= product.documents.length %> tài liệu</span>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
  </div>

  <!-- Warranty Support Button -->
  <div class="social-buttons">
    <div class="social-button warranty" onclick="openWarrantyModal()">
      <i class="fas fa-shield-alt"></i>
    </div>
    <a href="tel:0777006786" class="social-button phone">
      <i class="fas fa-phone"></i>
    </a>
    <a href="https://zalo.me/0777006786" target="_blank" class="social-button zalo">
      <img src="https://stc-zaloprofile.zdn.vn/pc/v1/images/zalo_sharelogo.png" alt="Zalo" class="zalo-icon">
    </a>
  </div>

  <!-- Warranty Support Modal -->
  <div class="modal fade" id="warrantyModal" tabindex="-1" aria-labelledby="warrantyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h5 class="modal-title" id="warrantyModalLabel">Yêu cầu hỗ trợ bảo hành</h5>
            <!-- <small class="text-muted">Vui lòng nhập chính xác ít nhất 2 thông tin (Họ tên, Số điện thoại, Email, Sản phẩm) từ danh sách bảo hành</small> -->
          </div>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="warrantyRequestForm" action="/warranty-support/request" method="POST" novalidate>
            <div class="mb-3">
              <label for="customerName" class="form-label">Họ và tên <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="customerName" name="customerName" required minlength="3" pattern=".{3,}">
              <div class="invalid-feedback">Họ và tên phải có ít nhất 3 ký tự.</div>
            </div>
            <div class="mb-3">
              <label for="customerPhone" class="form-label">Số điện thoại <span class="text-danger">*</span></label>
              <input type="tel" class="form-control" id="customerPhone" name="customerPhone" required pattern="^0\d{9,10}$">
              <div class="invalid-feedback">Số điện thoại phải bắt đầu bằng số 0 và có từ 10 đến 11 chữ số.</div>
            </div>
            <div class="mb-3">
              <label for="customerEmail" class="form-label">Email <span class="text-danger">*</span></label>
              <input type="email" class="form-control" id="customerEmail" name="customerEmail" required>
              <div class="invalid-feedback">Vui lòng nhập email hợp lệ.</div>
            </div>
            <div class="mb-3">
              <label for="product" class="form-label">Sản phẩm cần bảo hành <span class="text-danger">*</span></label>
              <select class="form-select" id="product" name="productId" required>
                <option value="">Chọn sản phẩm</option>
                <% if (publishedProducts && publishedProducts.length > 0) { %>
                  <% publishedProducts.forEach(product => { %>
                    <option value="<%= product._id %>"><%= product.name %></option>
                  <% }); %>
                <% } %>
              </select>
              <div class="invalid-feedback">Vui lòng chọn sản phẩm cần bảo hành.</div>
            </div>
            <div class="mb-3">
              <label for="supportDate" class="form-label">Ngày cần hỗ trợ <span class="text-danger">*</span></label>
              <input type="date" class="form-control" id="supportDate" name="supportDate" required>
              <div class="invalid-feedback">Vui lòng chọn ngày cần hỗ trợ.</div>
            </div>
            <div class="mb-3">
              <label for="issue" class="form-label">Mô tả vấn đề <span class="text-danger">*</span></label>
              <textarea class="form-control" id="issue" name="issue" rows="3" required minlength="10"></textarea>
              <div class="invalid-feedback">Vui lòng mô tả vấn đề với ít nhất 10 ký tự.</div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
          <button type="button" class="btn btn-primary" id="submitWarrantyRequest">Gửi yêu cầu</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Success Modal -->
  <div class="modal fade" id="successModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Gửi yêu cầu thành công</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Yêu cầu hỗ trợ bảo hành của bạn đã được gửi thành công.</p>
          <p>Chúng tôi sẽ liên hệ với bạn sớm nhất có thể.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Đồng ý</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    function goToDocumentPage(productId) {
      window.location.href = `/public/product/${productId}/documents`;
    }

    // Open warranty modal
    function openWarrantyModal() {
      const modal = new bootstrap.Modal(document.getElementById('warrantyModal'));
      modal.show();
    }

    // Handle warranty request submission
    document.getElementById('submitWarrantyRequest').addEventListener('click', function() {
      const form = document.getElementById('warrantyRequestForm');
      
      // Reset validation styles
      form.querySelectorAll('.is-invalid').forEach(el => {
        el.classList.remove('is-invalid');
      });
      
      // Manual validation
      let isValid = true;
      
      // Validate name (min 3 characters)
      const nameInput = form.querySelector('#customerName');
      if (!nameInput.value || nameInput.value.length < 3) {
        nameInput.classList.add('is-invalid');
        isValid = false;
      }
      
      // Validate phone (starts with 0, 10-11 digits)
      const phoneInput = form.querySelector('#customerPhone');
      const phonePattern = /^0\d{9,10}$/;
      if (!phonePattern.test(phoneInput.value)) {
        phoneInput.classList.add('is-invalid');
        isValid = false;
      }
      
      // Validate email
      const emailInput = form.querySelector('#customerEmail');
      const emailPattern = /\S+@\S+\.\S+/;
      if (!emailPattern.test(emailInput.value)) {
        emailInput.classList.add('is-invalid');
        isValid = false;
      }
      
      // Validate product
      const productInput = form.querySelector('#product');
      if (!productInput.value) {
        productInput.classList.add('is-invalid');
        isValid = false;
      }
      
      // Validate support date
      const dateInput = form.querySelector('#supportDate');
      if (!dateInput.value) {
        dateInput.classList.add('is-invalid');
        isValid = false;
      }
      
      // Validate issue description (min 10 characters)
      const issueInput = form.querySelector('#issue');
      if (!issueInput.value || issueInput.value.length < 10) {
        issueInput.classList.add('is-invalid');
        isValid = false;
      }
      
      // If the form is not valid, stop submission
      if (!isValid) {
        return;
      }
      
      // Get form data and convert to JSON
      const formData = new FormData(form);
      const formJson = {};
      formData.forEach((value, key) => {
        formJson[key] = value;
      });
      
      // First check if customer info matches with existing warranty records
      fetch('/api/check-warranty-match', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          customerName: nameInput.value,
          customerPhone: phoneInput.value,
          customerEmail: emailInput.value,
          productId: productInput.value
        })
      })
      .then(response => response.json())
      .then(matchData => {
        if (matchData.matchCount >= 2) {
          // If at least 2 fields match, proceed with the warranty request submission
          return fetch(form.action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(formJson)
          });
        } else {
          // If less than 2 fields match, show error message
          throw new Error('Thông tin không khớp với hồ sơ bảo hành. Vui lòng nhập chính xác ít nhất 2 thông tin (Họ tên, Số điện thoại, Email, Sản phẩm) từ danh sách bảo hành.');
        }
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        }
        throw new Error('Network response was not ok');
      })
      .then(data => {
        // Hide warranty modal
        const warrantyModal = bootstrap.Modal.getInstance(document.getElementById('warrantyModal'));
        warrantyModal.hide();
        
        // Show success modal
        const successModal = new bootstrap.Modal(document.getElementById('successModal'));
        successModal.show();
        
        // Reset form
        form.reset();
      })
      .catch(error => {
        console.error('Error:', error);
        alert(error.message || 'Có lỗi xảy ra khi gửi yêu cầu. Vui lòng thử lại sau.');
      });
    });

    // Set default support date to tomorrow
    document.addEventListener('DOMContentLoaded', function() {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      const supportDateInput = document.getElementById('supportDate');
      if (supportDateInput) {
        supportDateInput.min = tomorrow.toISOString().split('T')[0];
        supportDateInput.value = tomorrow.toISOString().split('T')[0];
      }
    });
  </script>
</body>
</html>