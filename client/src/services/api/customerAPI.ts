import { create, ApiResponse } from 'apisauce';
import { Platform } from 'react-native';
import { CustomerResponse } from '../../models/customer/customer';
import { ApiEndpoint } from './api-endpoint';

// Define base URLs for different environments
const ANDROID_BASE_URL = 'http://10.0.2.2';  // Android emulator localhost
const IOS_BASE_URL = 'http://localhost';     // iOS simulator localhost
const DEFAULT_BASE_URL = 'http://localhost'; // Fallback
const TABLE_BASE_URL = 'http://192.168.1.170'; // Server IP (works on real devices)
// List of ports to try
const PORTS = [5000, 3000, 8000, 8080];

// Generate all possible base URLs
const generateBaseUrls = (baseUrl: string) => {
  return PORTS.map(port => `${baseUrl}:${port}`);
};

// Get appropriate base URLs for current platform
const getBaseUrls = () => {
  if (Platform.OS === 'android') {
    // return generateBaseUrls(TABLE_BASE_URL);
    return generateBaseUrls(TABLE_BASE_URL);
  } else if (Platform.OS === 'ios') {
    return generateBaseUrls(IOS_BASE_URL);
  }
  return generateBaseUrls(DEFAULT_BASE_URL);
};

// Start with first URL
let currentUrlIndex = 0;
const baseUrls = getBaseUrls();

// Current BASE_URL - will be updated if a port works
export const BASE_URL = baseUrls[currentUrlIndex];

// Store the active port when found
const saveActivePort = async (port: number) => {
  try {
    console.log(`üîÑ Saved active API port: ${port}`);
  } catch (error) {
    console.error('‚ùå Failed to save active port:', error);
  }
};

// API functions
export const customerAPI = {
  // L·∫•y danh s√°ch kh√°ch h√†ng
  getCustomers: async () => {
    // Create a new API instance
    const apiClient = create({
      baseURL: BASE_URL,
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000, // 30 seconds
    });
    
    return apiClient.get(ApiEndpoint.CUSTOMERS_PUBLIC);
  },
  
  // Th√™m kh√°ch h√†ng m·ªõi
  addCustomer: (customerData: any) => {
    const apiClient = create({
      baseURL: BASE_URL,
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000,
    });
    
    console.log('Sending to endpoint:', '/customers/mobile/customers/add');
    console.log('Data:', JSON.stringify(customerData, null, 2));
    return apiClient.post('/customers/mobile/customers/add', customerData);
  },
  
  // C·∫≠p nh·∫≠t kh√°ch h√†ng - S·ª≠ d·ª•ng endpoint ƒë·∫∑c bi·ªát cho mobile app
  updateCustomer: (customerId: string, customerData: any) => {
    const apiClient = create({
      baseURL: BASE_URL,
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000,
    });
    
    console.log('Updating customer at endpoint:', `/customers/mobile/customers/update/${customerId}`);
    console.log('Update data:', JSON.stringify(customerData, null, 2));
    return apiClient.put(`/customers/mobile/customers/update/${customerId}`, customerData);
  },
  
  // X√≥a kh√°ch h√†ng
  deleteCustomer: (customerId: string) => {
    const apiClient = create({
      baseURL: BASE_URL,
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000,
    });
    
    return apiClient.delete(`/customers/${customerId}`);
  },
  
  // T√¨m ki·∫øm kh√°ch h√†ng theo s·ªë ƒëi·ªán tho·∫°i
  searchCustomerByPhone: (phoneNumber: string) => {
    const apiClient = create({
      baseURL: BASE_URL,
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000,
    });
    
    return apiClient.get('/customers/search', { phoneNumber });
  },

  // Try the next available port if the current one fails
  tryNextPort: () => {
    currentUrlIndex = (currentUrlIndex + 1) % baseUrls.length;
    const newBaseUrl = baseUrls[currentUrlIndex];
    console.log(`üîÑ Switching to next API URL: ${newBaseUrl}`);
    return newBaseUrl;
  }
};

// Helper function to process API errors
export function getGeneralApiProblem(response: ApiResponse<any>) {
  console.error('‚ùå API ERROR:', response.problem, response.status, response.data);

  if (!response.ok) {
    switch (response.problem) {
      case 'NETWORK_ERROR':
        return { kind: 'network', message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† ƒë·∫£m b·∫£o server ƒëang ch·∫°y.' };
      case 'TIMEOUT_ERROR':
        return { kind: 'timeout', message: 'K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° l√¢u. Vui l√≤ng th·ª≠ l·∫°i sau.' };
      case 'CONNECTION_ERROR':
        return { kind: 'connection', message: 'L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.' };
      case 'CANCEL_ERROR':
        return { kind: 'cancel', message: 'Y√™u c·∫ßu ƒë√£ b·ªã h·ªßy.' };
      case 'SERVER_ERROR':
        return { kind: 'server', message: 'M√°y ch·ªß g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.' };
      default:
        // X·ª≠ l√Ω c√°c m√£ status HTTP
        switch (response.status) {
          case 401:
            return { kind: 'unauthorized', message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.' };
          case 403:
            return { kind: 'forbidden', message: 'Truy c·∫≠p b·ªã t·ª´ ch·ªëi.' };
          case 404:
            return { kind: 'not-found', message: 'Kh√¥ng t√¨m th·∫•y t√†i nguy√™n.' };
          case 500:
          case 503:
            return { kind: 'server', message: 'M√°y ch·ªß g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.' };
          default:
            return { kind: 'unknown', message: 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.' };
        }
    }
  }
  
  return null;
}

// Main API Service object for customers
export const ApiService = {
  async getCustomers() {
    try {
      console.log('üìå G·ªçi API: L·∫•y danh s√°ch kh√°ch h√†ng t·ª´', ApiEndpoint.CUSTOMERS_PUBLIC);
      console.log('üìå URL ƒë·∫ßy ƒë·ªß:', `${BASE_URL}${ApiEndpoint.CUSTOMERS_PUBLIC}`);

      // T·∫°o API c√¥ng khai kh√¥ng c·∫ßn token
      const publicApi = create({
        baseURL: BASE_URL,
        headers: { 'Content-Type': 'application/json' },
        timeout: 15000,
      });

      // G·ªçi API
      const response = await publicApi.get(ApiEndpoint.CUSTOMERS_PUBLIC);
      
      // Ghi log ph·∫£n h·ªìi
      console.log('üîÑ Response t·ª´ API:', response.status, response.problem);

      // Ki·ªÉm tra l·ªói
      if (!response.ok) {
        const problem = getGeneralApiProblem(response);
        console.error('‚ùå L·ªói API:', problem);
        return problem || { kind: 'unknown', message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh' };
      }

      // Ki·ªÉm tra ph·∫£n h·ªìi JSON h·ª£p l·ªá
      if (!response.data) {
        console.error('‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:', response.data);
        return { kind: 'bad-data', message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' };
      }

      // Log chi ti·∫øt ƒë·ªÉ debug
      console.log('‚úÖ API tr·∫£ v·ªÅ d·ªØ li·ªáu:', response.data);
      
      // Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng cho store
      return { 
        kind: 'ok',
        customers: Array.isArray(response.data) ? response.data : []
      };
    } catch (error) {
      console.error('‚ùå Exception khi g·ªçi API:', error);
      return { 
        kind: 'unknown', 
        message: error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
      };
    }
  },
  
  async searchCustomersByPhone(phoneNumber: string) {
    try {
      if (!phoneNumber || phoneNumber.trim() === '') {
        return { kind: 'ok', customers: [] };
      }
      
      // ƒê∆∞·ªùng d·∫´n API search
      const searchEndpoint = '/customers/search';
      console.log('üì± G·ªçi API t√¨m ki·∫øm kh√°ch h√†ng theo SƒêT:', phoneNumber);
      console.log('üì± URL ƒë·∫ßy ƒë·ªß:', `${BASE_URL}${searchEndpoint}?phoneNumber=${phoneNumber}`);

      // T·∫°o API c√¥ng khai kh√¥ng c·∫ßn token
      const publicApi = create({
        baseURL: BASE_URL,
        headers: { 'Content-Type': 'application/json' },
        timeout: 15000,
      });

      // G·ªçi API v·ªõi tham s·ªë t√¨m ki·∫øm
      const response = await publicApi.get(searchEndpoint, { 
        phoneNumber // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng ƒë√∫ng tham s·ªë m√† backend mong ƒë·ª£i
      });
      
      // Ki·ªÉm tra l·ªói
      if (!response.ok) {
        const problem = getGeneralApiProblem(response);
        console.error('‚ùå L·ªói API t√¨m ki·∫øm:', problem);
        return problem || { kind: 'unknown', message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh' };
      }

      // Ki·ªÉm tra ph·∫£n h·ªìi JSON h·ª£p l·ªá
      if (!response.data) {
        console.error('‚ö†Ô∏è API t√¨m ki·∫øm tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:', response.data);
        return { kind: 'bad-data', message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' };
      }
      
      // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ an to√†n
      let customers: CustomerResponse[] = [];
      
      // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu tr·∫£ v·ªÅ
      if (typeof response.data === 'object') {
        if (response.data && 'customers' in response.data && Array.isArray(response.data.customers)) {
          customers = response.data.customers;
        } else if (Array.isArray(response.data)) {
          customers = response.data;
        }
      }
      
      return { kind: 'ok', customers };
    } catch (error) {
      console.error('‚ùå Exception khi g·ªçi API t√¨m ki·∫øm:', error);
      return { 
        kind: 'unknown', 
        message: error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
      };
    }
  },
};

export default customerAPI;
